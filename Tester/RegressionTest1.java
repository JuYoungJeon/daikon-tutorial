package Tester;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test01() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray20 = strComparableQueue19.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        java.util.AbstractCollection[] abstractCollectionArray56 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray57 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray56;
        strComparableCollectionArray57[0] = strComparableList24;
        strComparableCollectionArray57[1] = strComparableList31;
        strComparableCollectionArray57[2] = strComparableList37;
        strComparableCollectionArray57[3] = strComparableList44;
        strComparableCollectionArray57[4] = strComparableList51;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray68 = strComparableQueue19.toArray(strComparableCollectionArray57);
        boolean boolean69 = strComparableQueue13.contains((java.lang.Object) strComparableCollectionArray68);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream72 = strComparableQueue71.stream();
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue71.poll();
        java.lang.Object[] objArray74 = strComparableQueue71.toArray();
        boolean boolean75 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        boolean boolean76 = strComparableQueue8.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream77 = strComparableQueue71.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue79 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableQueue79.poll();
        java.lang.String str81 = strComparableQueue79.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor82 = strComparableQueue79.iterator();
        boolean boolean83 = strComparableQueue79.isEmpty();
        java.lang.Object[] objArray84 = strComparableQueue79.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue86 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean87 = strComparableQueue79.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue86);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue89 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable90 = strComparableQueue89.poll();
        boolean boolean91 = strComparableQueue89.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue93 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable94 = strComparableQueue93.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator95 = strComparableQueue93.spliterator();
        boolean boolean96 = strComparableQueue89.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue93);
        boolean boolean97 = strComparableQueue86.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue89);
        boolean boolean98 = strComparableQueue71.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue86);
        java.lang.Comparable<java.lang.String> strComparable99 = strComparableQueue86.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(abstractCollectionArray56);
        org.junit.Assert.assertNotNull(strComparableCollectionArray57);
        org.junit.Assert.assertNotNull(strComparableCollectionArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableStream72);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strComparableStream77);
        org.junit.Assert.assertNull(strComparable80);
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "[]" + "'", str81.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strComparable90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(strComparable94);
        org.junit.Assert.assertNotNull(strComparableSpliterator95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNull(strComparable99);
    }

    @Test
    public void test02() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test02");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        boolean boolean18 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass19 = strComparableQueue1.getClass();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor20 = strComparableQueue1.iterator();
        boolean boolean22 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strComparableItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test03() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test03");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue59.iterator();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator65 = strComparableQueue59.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertNotNull(strComparableSpliterator65);
    }

    @Test
    public void test04() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test04");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue8.parallelStream();
        java.lang.Class<?> wildcardClass13 = strComparableQueue8.getClass();
        boolean boolean14 = strComparableQueue8.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue16.poll();
        java.lang.String str18 = strComparableQueue16.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor19 = strComparableQueue16.iterator();
        int int20 = strComparableQueue16.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        strComparableQueue22.clear();
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue22.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        java.lang.String str32 = strComparableQueue30.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableQueue30.iterator();
        boolean boolean34 = strComparableQueue22.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableQueue30.parallelStream();
        boolean boolean36 = strComparableQueue16.contains((java.lang.Object) strComparableStream35);
        boolean boolean38 = strComparableQueue16.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue16.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator40 = strComparableQueue16.spliterator();
        java.lang.Class<?> wildcardClass41 = strComparableQueue16.getClass();
        int int42 = strComparableQueue16.maxSize();
        boolean boolean43 = strComparableQueue8.contains((java.lang.Object) int42);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]" + "'", str18.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]" + "'", str32.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + strComparable39 + "' != '" + "" + "'", strComparable39.equals(""));
        org.junit.Assert.assertNotNull(strComparableSpliterator40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test05");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        int int17 = strComparableQueue1.maxSize();
        int int18 = strComparableQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test06() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test06");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        boolean boolean41 = strComparableQueue39.isAtFullCapacity();
        boolean boolean42 = strComparableQueue36.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        boolean boolean44 = strComparableQueue39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean45 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList53 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean54 = strComparableList53.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean55 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList53);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream56 = strComparableList53.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue58 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream59 = strComparableQueue58.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream62 = strComparableQueue61.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList66 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean67 = strComparableList66.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean68 = strComparableQueue64.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList66);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream69 = strComparableList66.stream();
        java.util.stream.Stream[] streamArray71 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray72 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray71;
        strComparableStreamArray72[0] = strComparableStream56;
        strComparableStreamArray72[1] = strComparableStream59;
        strComparableStreamArray72[2] = strComparableStream62;
        strComparableStreamArray72[3] = strComparableStream69;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray81 = strComparableQueue48.toArray(strComparableStreamArray72);
        boolean boolean82 = strComparableQueue48.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue84 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList86 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean87 = strComparableList86.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean88 = strComparableQueue84.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream89 = strComparableList86.stream();
        boolean boolean90 = strComparableQueue48.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        boolean boolean91 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        boolean boolean92 = strComparableQueue1.isFull();
        java.lang.Object obj93 = null;
        boolean boolean94 = strComparableQueue1.remove(obj93);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparableStream56);
        org.junit.Assert.assertNotNull(strComparableStream59);
        org.junit.Assert.assertNotNull(strComparableStream62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparableStream69);
        org.junit.Assert.assertNotNull(streamArray71);
        org.junit.Assert.assertNotNull(strComparableStreamArray72);
        org.junit.Assert.assertNotNull(strComparableStreamArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strComparableStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test07() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test07");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue1.peek();
        boolean boolean19 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[[hi!]]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test08");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.peek();
        boolean boolean3 = strComparableQueue1.isEmpty();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparableItor4);
    }

    @Test
    public void test09() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test09");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue1.poll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable18);
    }

    @Test
    public void test10() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test10");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue8.parallelStream();
        java.lang.Class<?> wildcardClass13 = strComparableQueue8.getClass();
        java.lang.String str14 = strComparableQueue8.toString();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
    }

    @Test
    public void test11() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test11");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue3.stream();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue3.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue3.poll();
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strComparable8);
    }

    @Test
    public void test12() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test12");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue1.remove();
        strComparableQueue1.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + strComparable37 + "' != '" + "[]" + "'", strComparable37.equals("[]"));
    }

    @Test
    public void test13() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test13");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        int int16 = strComparableQueue12.maxSize();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue12.peek();
        boolean boolean18 = strComparableQueue1.remove((java.lang.Object) strComparable17);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList23 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean24 = strComparableList23.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean25 = strComparableQueue21.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList23);
        strComparableQueue21.clear();
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue21.poll();
        java.lang.String str28 = strComparableQueue21.toString();
        java.lang.String[] strArray30 = new java.lang.String[] { "[]" };
        java.lang.String[] strArray32 = new java.lang.String[] { "[]" };
        java.lang.String[] strArray34 = new java.lang.String[] { "[]" };
        java.lang.String[] strArray36 = new java.lang.String[] { "[]" };
        java.lang.String[] strArray38 = new java.lang.String[] { "[]" };
        java.lang.String[][] strArray39 = new java.lang.String[][] { strArray30, strArray32, strArray34, strArray36, strArray38 };
        java.lang.String[][] strArray40 = strComparableQueue21.toArray(strArray39);
        java.lang.Cloneable[] cloneableArray41 = strComparableQueue1.toArray((java.lang.Cloneable[]) strArray39);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strComparable27);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]" + "'", str28.equals("[]"));
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(cloneableArray41);
    }

    @Test
    public void test14() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test14");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue54 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableQueue54.poll();
        java.lang.String str56 = strComparableQueue54.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableQueue54.iterator();
        boolean boolean58 = strComparableQueue54.isEmpty();
        java.lang.Object[] objArray59 = strComparableQueue54.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue64.poll();
        boolean boolean66 = strComparableQueue64.isAtFullCapacity();
        boolean boolean67 = strComparableQueue61.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue64);
        boolean boolean68 = strComparableQueue54.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        boolean boolean69 = strComparableQueue61.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream70 = strComparableQueue61.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        boolean boolean74 = strComparableQueue61.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>> strComparableStreamQueue75 = new Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>();
        boolean boolean76 = strComparableQueue72.contains((java.lang.Object) strComparableStreamQueue75);
        boolean boolean77 = strComparableQueue72.isEmpty();
        boolean boolean78 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertNull(strComparable55);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[]" + "'", str56.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertNull(strComparable65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparableStream70);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test15() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test15");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        java.lang.Class<?> wildcardClass6 = strComparableQueue1.getClass();
        boolean boolean8 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableQueue1.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        boolean boolean23 = strComparableQueue21.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        java.lang.String str27 = strComparableQueue25.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor28 = strComparableQueue25.iterator();
        boolean boolean29 = strComparableQueue25.isEmpty();
        boolean boolean31 = strComparableQueue25.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean32 = strComparableQueue21.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList36 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean37 = strComparableList36.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean38 = strComparableQueue34.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList36);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableQueue40.poll();
        boolean boolean42 = strComparableQueue40.isAtFullCapacity();
        java.lang.Object[] objArray43 = strComparableQueue40.toArray();
        boolean boolean44 = strComparableQueue34.contains((java.lang.Object) objArray43);
        boolean boolean45 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        boolean boolean46 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        boolean boolean47 = strComparableQueue11.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        boolean boolean48 = strComparableQueue1.contains((java.lang.Object) strComparableQueue11);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]" + "'", str27.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(strComparable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test16() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test16");
        Tester.CircularFifoQueue<java.lang.String> strQueue1 = new Tester.CircularFifoQueue<java.lang.String>(5);
    }

    @Test
    public void test17() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test17");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean32 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue38.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator40 = strComparableQueue38.spliterator();
        boolean boolean41 = strComparableQueue34.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        boolean boolean42 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableQueue31.stream();
        int int44 = strComparableQueue31.maxSize();
        boolean boolean45 = strComparableQueue1.contains((java.lang.Object) int44);
        int int46 = strComparableQueue1.maxSize();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strComparable39);
        org.junit.Assert.assertNotNull(strComparableSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test18() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test18");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        java.lang.Object[] objArray24 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList28 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean29 = strComparableList28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean30 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList28);
        strComparableQueue26.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        boolean boolean36 = strComparableQueue33.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean37 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        int int38 = strComparableQueue33.size();
        boolean boolean39 = strComparableQueue33.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        boolean boolean41 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        int int42 = strComparableQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test19() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test19");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Class<?> wildcardClass8 = strComparableQueue4.getClass();
        boolean boolean10 = strComparableQueue4.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean11 = strComparableQueue4.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue4.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparableStream12);
    }

    @Test
    public void test20() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test20");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        boolean boolean43 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList48 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean49 = strComparableList48.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean50 = strComparableQueue46.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList48);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue52.poll();
        java.lang.String str54 = strComparableQueue52.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor55 = strComparableQueue52.iterator();
        boolean boolean56 = strComparableQueue52.isEmpty();
        java.lang.Object[] objArray57 = strComparableQueue52.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean60 = strComparableQueue52.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        boolean boolean61 = strComparableQueue46.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue63 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean64 = strComparableQueue63.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue63.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor66 = strComparableQueue63.iterator();
        boolean boolean67 = strComparableQueue63.isEmpty();
        boolean boolean68 = strComparableQueue59.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue63);
        int int69 = strComparableQueue63.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue73 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream74 = strComparableQueue73.stream();
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableQueue73.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor76 = strComparableQueue73.iterator();
        boolean boolean77 = strComparableQueue71.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue73);
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableQueue71.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor79 = strComparableQueue71.iterator();
        boolean boolean80 = strComparableQueue63.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        boolean boolean81 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue63);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strComparable44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(strComparable53);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]" + "'", str54.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + strComparable65 + "' != '" + "" + "'", strComparable65.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strComparableStream74);
        org.junit.Assert.assertNull(strComparable75);
        org.junit.Assert.assertNotNull(strComparableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(strComparable78);
        org.junit.Assert.assertNotNull(strComparableItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test21() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test21");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        boolean boolean15 = strComparableQueue11.isEmpty();
        java.lang.Object[] objArray16 = strComparableQueue11.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean19 = strComparableQueue11.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean20 = strComparableQueue8.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        strComparableQueue22.clear();
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue22.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        java.lang.String str32 = strComparableQueue30.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableQueue30.iterator();
        boolean boolean34 = strComparableQueue22.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        boolean boolean41 = strComparableQueue39.isAtFullCapacity();
        boolean boolean42 = strComparableQueue36.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        boolean boolean43 = strComparableQueue22.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        boolean boolean44 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableQueue46.poll();
        java.lang.String str48 = strComparableQueue46.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor49 = strComparableQueue46.iterator();
        boolean boolean50 = strComparableQueue46.isEmpty();
        java.lang.Object[] objArray51 = strComparableQueue46.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue56.poll();
        boolean boolean58 = strComparableQueue56.isAtFullCapacity();
        boolean boolean59 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue56);
        boolean boolean60 = strComparableQueue46.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        boolean boolean61 = strComparableQueue53.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream62 = strComparableQueue53.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue64.poll();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue64);
        Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>> strComparableStreamQueue67 = new Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>();
        boolean boolean68 = strComparableQueue64.contains((java.lang.Object) strComparableStreamQueue67);
        boolean boolean69 = strComparableQueue8.contains((java.lang.Object) strComparableQueue64);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]" + "'", str32.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strComparable47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]" + "'", str48.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNull(strComparable54);
        org.junit.Assert.assertNull(strComparable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strComparableStream62);
        org.junit.Assert.assertNull(strComparable65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test22() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test22");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        boolean boolean15 = strComparableQueue13.isAtFullCapacity();
        boolean boolean16 = strComparableQueue10.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue13.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor20 = strComparableQueue19.iterator();
        boolean boolean21 = strComparableQueue13.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean22 = strComparableQueue1.contains((java.lang.Object) boolean21);
        int int23 = strComparableQueue1.size();
        boolean boolean25 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass26 = strComparableQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertNotNull(strComparableItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test23() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test23");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue3.stream();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue3.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
        java.lang.Class<?> wildcardClass8 = strComparableQueue3.getClass();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test24() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test24");
        Tester.CircularFifoQueue<java.util.List<java.lang.Comparable<java.lang.String>>> strComparableListQueue1 = new Tester.CircularFifoQueue<java.util.List<java.lang.Comparable<java.lang.String>>>(2);
    }

    @Test
    public void test25() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test25");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue5.spliterator();
        boolean boolean8 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream11 = strComparableQueue10.stream();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue10.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue10.peek();
        java.lang.Object[] objArray15 = strComparableQueue10.toArray();
        boolean boolean16 = strComparableQueue1.remove((java.lang.Object) objArray15);
        boolean boolean17 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparableStream11);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test26() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test26");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.poll();
        int int5 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        boolean boolean26 = strComparableQueue24.isAtFullCapacity();
        boolean boolean27 = strComparableQueue21.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue24);
        boolean boolean28 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue24);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "[]", "hi!", "[]", "" };
        java.lang.CharSequence[] charSequenceArray34 = strComparableQueue24.toArray(charSequenceArray33);
        boolean boolean36 = strComparableQueue24.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue24.peek();
        boolean boolean38 = strComparableQueue1.contains((java.lang.Object) strComparableQueue24);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + strComparable37 + "' != '" + "[]" + "'", strComparable37.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }
}
