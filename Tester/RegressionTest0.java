package Tester;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        try {
            java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        Tester.CircularFifoQueue<java.lang.Object> objQueue1 = new Tester.CircularFifoQueue<java.lang.Object>((int) 'a');
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        Tester.CircularFifoQueue<java.lang.reflect.GenericDeclaration> genericDeclarationQueue0 = new Tester.CircularFifoQueue<java.lang.reflect.GenericDeclaration>();
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        try {
            Tester.CircularFifoQueue<java.util.Queue<java.lang.Comparable<java.lang.String>>> strComparableQueueQueue1 = new Tester.CircularFifoQueue<java.util.Queue<java.lang.Comparable<java.lang.String>>>((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        strComparableQueue1.clear();
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection6 = null;
        try {
            boolean boolean7 = strComparableQueue1.addAll(strComparableCollection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream3 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strComparableStream3);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.get(4);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (4) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableList3.stream();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableList3.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        try {
            java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        try {
            java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue9.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor4);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        try {
            java.lang.Comparable<java.lang.String> strComparable52 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue0 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        try {
            java.lang.Comparable<java.lang.String> strComparable1 = strComparableQueue0.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        try {
            Tester.CircularFifoQueue<Tester.AbstractCollection<java.lang.Comparable<java.lang.String>>> strComparableCollectionQueue1 = new Tester.CircularFifoQueue<Tester.AbstractCollection<java.lang.Comparable<java.lang.String>>>((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        try {
            java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue13.get(5);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (5) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        boolean boolean7 = strComparableQueue1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        Tester.CircularFifoQueue<java.lang.Object[]> objArrayQueue0 = new Tester.CircularFifoQueue<java.lang.Object[]>();
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        boolean boolean36 = strComparableQueue13.offer((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable3);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        try {
            java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Class<?> wildcardClass8 = strComparableQueue4.getClass();
        boolean boolean10 = strComparableQueue4.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Object obj11 = null;
        boolean boolean12 = strComparableQueue4.contains(obj11);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList29 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean30 = strComparableList29.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean31 = strComparableQueue27.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList29);
        strComparableQueue27.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor35 = strComparableQueue34.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        java.lang.String str39 = strComparableQueue37.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor40 = strComparableQueue37.iterator();
        java.util.Iterator[] iteratorArray42 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray43 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray42;
        strComparableItorArray43[0] = strComparableItor35;
        strComparableItorArray43[1] = strComparableItor40;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray48 = strComparableQueue27.toArray(strComparableItorArray43);
        try {
            java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray49 = strComparableQueue5.toArray(strComparableItorArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableItor35);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]" + "'", str39.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor40);
        org.junit.Assert.assertNotNull(iteratorArray42);
        org.junit.Assert.assertNotNull(strComparableItorArray43);
        org.junit.Assert.assertNotNull(strComparableItorArray48);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray26 = strComparableQueue25.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableQueue25.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.poll();
        boolean boolean32 = strComparableQueue29.offer((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        strComparableQueue36.clear();
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue36.poll();
        java.lang.String str43 = strComparableQueue36.toString();
        Tester.BoundedCollection[] boundedCollectionArray45 = new Tester.BoundedCollection[6];
        @SuppressWarnings("unchecked") Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray46 = (Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[]) boundedCollectionArray45;
        strComparableCollectionArray46[0] = strComparableQueue10;
        strComparableCollectionArray46[1] = strComparableQueue18;
        strComparableCollectionArray46[2] = strComparableQueue25;
        strComparableCollectionArray46[3] = strComparableQueue29;
        strComparableCollectionArray46[4] = strComparableQueue34;
        strComparableCollectionArray46[5] = strComparableQueue36;
        Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray59 = strComparableQueue4.toArray(strComparableCollectionArray46);
        try {
            java.lang.Comparable<java.lang.String> strComparable60 = strComparableQueue4.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]" + "'", str43.equals("[]"));
        org.junit.Assert.assertNotNull(boundedCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray46);
        org.junit.Assert.assertNotNull(strComparableCollectionArray59);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.get(1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        Tester.CircularFifoQueue<Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>> strComparableQueueQueue1 = new Tester.CircularFifoQueue<Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>>((int) (short) 10);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        try {
            java.lang.Comparable<java.lang.String> strComparable54 = strComparableQueue9.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        boolean boolean21 = strComparableQueue15.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue18.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        boolean boolean30 = strComparableQueue24.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList34 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean35 = strComparableList34.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean36 = strComparableQueue32.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList34);
        strComparableQueue32.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray40 = strComparableQueue39.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableQueue39.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableQueue43.poll();
        boolean boolean46 = strComparableQueue43.offer((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue50 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList52 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean53 = strComparableList52.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean54 = strComparableQueue50.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList52);
        strComparableQueue50.clear();
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableQueue50.poll();
        java.lang.String str57 = strComparableQueue50.toString();
        Tester.BoundedCollection[] boundedCollectionArray59 = new Tester.BoundedCollection[6];
        @SuppressWarnings("unchecked") Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray60 = (Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[]) boundedCollectionArray59;
        strComparableCollectionArray60[0] = strComparableQueue24;
        strComparableCollectionArray60[1] = strComparableQueue32;
        strComparableCollectionArray60[2] = strComparableQueue39;
        strComparableCollectionArray60[3] = strComparableQueue43;
        strComparableCollectionArray60[4] = strComparableQueue48;
        strComparableCollectionArray60[5] = strComparableQueue50;
        Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray73 = strComparableQueue18.toArray(strComparableCollectionArray60);
        Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray74 = strComparableQueue9.toArray(strComparableCollectionArray60);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertNull(strComparable44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(strComparable56);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]" + "'", str57.equals("[]"));
        org.junit.Assert.assertNotNull(boundedCollectionArray59);
        org.junit.Assert.assertNotNull(strComparableCollectionArray60);
        org.junit.Assert.assertNotNull(strComparableCollectionArray73);
        org.junit.Assert.assertNotNull(strComparableCollectionArray74);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue7.stream();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue7.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        boolean boolean17 = strComparableQueue15.isAtFullCapacity();
        boolean boolean18 = strComparableQueue12.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue15.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor22 = strComparableQueue21.iterator();
        boolean boolean23 = strComparableQueue15.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue21);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor24 = strComparableQueue15.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue15.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        boolean boolean32 = strComparableQueue30.isAtFullCapacity();
        boolean boolean33 = strComparableQueue27.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue30.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableQueue36.iterator();
        boolean boolean38 = strComparableQueue30.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue36);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor39 = strComparableQueue30.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor40 = strComparableQueue30.iterator();
        java.util.Iterator[] iteratorArray42 = new java.util.Iterator[3];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray43 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray42;
        strComparableItorArray43[0] = strComparableItor10;
        strComparableItorArray43[1] = strComparableItor25;
        strComparableItorArray43[2] = strComparableItor40;
        try {
            java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray50 = strComparableQueue1.toArray(strComparableItorArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertNotNull(strComparableItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparableItor24);
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertNotNull(strComparableItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strComparableItor39);
        org.junit.Assert.assertNotNull(strComparableItor40);
        org.junit.Assert.assertNotNull(iteratorArray42);
        org.junit.Assert.assertNotNull(strComparableItorArray43);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        boolean boolean24 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean25 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Object[] objArray54 = strComparableQueue9.toArray();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray54);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        try {
            java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue4.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue1.iterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strComparableItor6);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        try {
            java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue5.get(5);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (5) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int10 = strComparableQueue1.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.String str44 = strComparableQueue22.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[hi!]" + "'", str44.equals("[hi!]"));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        try {
            java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        try {
            java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Class<?> wildcardClass31 = strComparableQueue27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] { wildcardClass31 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = strComparableQueue1.toArray(genericDeclarationArray32);
        try {
            java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue1.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(objArray4);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue3.stream();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue3.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue1.iterator();
        int int10 = strComparableQueue1.maxSize();
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        Tester.CircularFifoQueue<java.lang.Object> objQueue1 = new Tester.CircularFifoQueue<java.lang.Object>((int) '#');
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        try {
            java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        boolean boolean43 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        try {
            java.lang.Comparable<java.lang.String> strComparable44 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        java.lang.String str23 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue1.get(10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        java.lang.String str23 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        try {
            java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue5.get((int) (byte) 0);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + strComparable27 + "' != '" + "hi!" + "'", strComparable27.equals("hi!"));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        Tester.CircularFifoQueue<java.lang.Class<?>> wildcardClassQueue0 = new Tester.CircularFifoQueue<java.lang.Class<?>>();
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        java.lang.Class<?>[] wildcardClassArray6 = null;
        try {
            java.lang.Class<?>[] wildcardClassArray7 = strComparableQueue1.toArray(wildcardClassArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue5.remove();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + strComparable26 + "' != '" + "hi!" + "'", strComparable26.equals("hi!"));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        strComparableQueue10.clear();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        java.lang.String str20 = strComparableQueue18.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue10.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean31 = strComparableQueue10.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean32 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean35 = strComparableQueue34.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue34.remove();
        boolean boolean37 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        int int38 = strComparableQueue1.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]" + "'", str20.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + strComparable36 + "' != '" + "" + "'", strComparable36.equals(""));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray16 = strComparableQueue15.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableList20.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableList40.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList47 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean48 = strComparableList47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean49 = strComparableQueue45.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList47);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableList47.stream();
        java.util.AbstractCollection[] abstractCollectionArray52 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray53 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray52;
        strComparableCollectionArray53[0] = strComparableList20;
        strComparableCollectionArray53[1] = strComparableList27;
        strComparableCollectionArray53[2] = strComparableList33;
        strComparableCollectionArray53[3] = strComparableList40;
        strComparableCollectionArray53[4] = strComparableList47;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray64 = strComparableQueue15.toArray(strComparableCollectionArray53);
        boolean boolean65 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        try {
            java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue15.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(abstractCollectionArray52);
        org.junit.Assert.assertNotNull(strComparableCollectionArray53);
        org.junit.Assert.assertNotNull(strComparableCollectionArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        java.lang.Object[] objArray11 = strComparableQueue1.toArray();
        boolean boolean13 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        int int8 = strComparableQueue4.maxSize();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue3.poll();
        java.lang.String str5 = strComparableQueue3.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue3.isEmpty();
        java.lang.Object[] objArray8 = strComparableQueue3.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean11 = strComparableQueue3.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        boolean boolean15 = strComparableQueue13.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue17.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableQueue17.spliterator();
        boolean boolean20 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue17);
        boolean boolean21 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        boolean boolean22 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue13.parallelStream();
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]" + "'", str5.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strComparable18);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableStream23);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        boolean boolean15 = strComparableQueue12.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue12.remove();
        boolean boolean17 = strComparableQueue1.contains((java.lang.Object) strComparableQueue12);
        try {
            java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + strComparable16 + "' != '" + "" + "'", strComparable16.equals(""));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue4.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue4.iterator();
        java.lang.Class<?> wildcardClass15 = strComparableItor14.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 1);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection2 = null;
        try {
            boolean boolean3 = strComparableQueue1.addAll(strComparableCollection2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        java.lang.String str4 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator6 = strComparableList3.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator6);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        try {
            java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue9.toString();
        int int16 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        boolean boolean28 = strComparableQueue25.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        boolean boolean30 = strComparableQueue9.remove((java.lang.Object) strComparableQueue18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream31 = strComparableQueue18.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strComparableStream31);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(strComparableStream2);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue15.spliterator();
        boolean boolean18 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean19 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        try {
            java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue8.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.poll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        boolean boolean15 = strComparableQueue12.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue12.remove();
        boolean boolean17 = strComparableQueue1.contains((java.lang.Object) strComparableQueue12);
        java.lang.Class<?> wildcardClass18 = strComparableQueue12.getClass();
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue12.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + strComparable16 + "' != '" + "" + "'", strComparable16.equals(""));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(strComparable19);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        int int17 = strComparableQueue1.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        try {
            java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue9.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (35) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue64.poll();
        boolean boolean66 = strComparableQueue64.isAtFullCapacity();
        boolean boolean67 = strComparableQueue61.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue64);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue69 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream70 = strComparableQueue69.stream();
        boolean boolean71 = strComparableQueue64.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue69);
        boolean boolean72 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue64);
        boolean boolean74 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertNull(strComparable65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strComparableStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        try {
            Tester.CircularFifoQueue<Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[]> comparableQueueArrayQueue1 = new Tester.CircularFifoQueue<Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[]>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue3.poll();
        java.lang.String str5 = strComparableQueue3.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue3.isEmpty();
        java.lang.Object[] objArray8 = strComparableQueue3.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean11 = strComparableQueue3.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        boolean boolean15 = strComparableQueue13.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue17.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableQueue17.spliterator();
        boolean boolean20 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue17);
        boolean boolean21 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        boolean boolean22 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator26 = strComparableQueue24.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableQueue28.stream();
        boolean boolean30 = strComparableQueue28.isEmpty();
        boolean boolean31 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue28);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream32 = strComparableQueue24.parallelStream();
        boolean boolean33 = strComparableQueue1.remove((java.lang.Object) strComparableStream32);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue35.poll();
        boolean boolean37 = strComparableQueue35.isAtFullCapacity();
        java.lang.Object[] objArray38 = strComparableQueue35.toArray();
        java.lang.Cloneable[] cloneableArray39 = new java.lang.Cloneable[] { objArray38 };
        java.lang.Cloneable[] cloneableArray40 = strComparableQueue1.toArray(cloneableArray39);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]" + "'", str5.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strComparable18);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNotNull(strComparableSpliterator26);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(cloneableArray39);
        org.junit.Assert.assertNotNull(cloneableArray40);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        strComparableQueue53.clear();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue44.poll();
        java.lang.String str46 = strComparableQueue44.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor47 = strComparableQueue44.iterator();
        boolean boolean48 = strComparableQueue44.isEmpty();
        java.lang.Object[] objArray49 = strComparableQueue44.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean52 = strComparableQueue44.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        boolean boolean53 = strComparableQueue38.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableQueue55.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue55.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor58 = strComparableQueue55.iterator();
        boolean boolean59 = strComparableQueue55.isEmpty();
        boolean boolean60 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        boolean boolean61 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        boolean boolean62 = strComparableQueue55.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strComparable45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]" + "'", str46.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + strComparable57 + "' != '" + "" + "'", strComparable57.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean17 = strComparableQueue14.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        strComparableQueue13.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray20 = strComparableQueue19.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        java.util.AbstractCollection[] abstractCollectionArray56 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray57 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray56;
        strComparableCollectionArray57[0] = strComparableList24;
        strComparableCollectionArray57[1] = strComparableList31;
        strComparableCollectionArray57[2] = strComparableList37;
        strComparableCollectionArray57[3] = strComparableList44;
        strComparableCollectionArray57[4] = strComparableList51;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray68 = strComparableQueue19.toArray(strComparableCollectionArray57);
        boolean boolean69 = strComparableQueue13.contains((java.lang.Object) strComparableCollectionArray68);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream72 = strComparableQueue71.stream();
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue71.poll();
        java.lang.Object[] objArray74 = strComparableQueue71.toArray();
        boolean boolean75 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        boolean boolean76 = strComparableQueue8.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        boolean boolean77 = strComparableQueue71.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(abstractCollectionArray56);
        org.junit.Assert.assertNotNull(strComparableCollectionArray57);
        org.junit.Assert.assertNotNull(strComparableCollectionArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableStream72);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        Tester.CircularFifoQueue<java.lang.Iterable<java.lang.Comparable<java.lang.String>>> strComparableIterableQueue1 = new Tester.CircularFifoQueue<java.lang.Iterable<java.lang.Comparable<java.lang.String>>>(5);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue9.toString();
        int int16 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        boolean boolean28 = strComparableQueue25.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        boolean boolean30 = strComparableQueue9.remove((java.lang.Object) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList34 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean35 = strComparableList34.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean36 = strComparableQueue32.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList34);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray39 = strComparableQueue38.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList43 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean44 = strComparableList43.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean45 = strComparableQueue41.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList43);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream46 = strComparableList43.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList50 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean51 = strComparableList50.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean52 = strComparableQueue48.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList50);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue54 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList56 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean57 = strComparableList56.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean58 = strComparableQueue54.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList56);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream59 = strComparableList56.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList63 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean64 = strComparableList63.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean65 = strComparableQueue61.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList63);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream66 = strComparableList63.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList70 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean71 = strComparableList70.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean72 = strComparableQueue68.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList70);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream73 = strComparableList70.stream();
        java.util.AbstractCollection[] abstractCollectionArray75 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray76 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray75;
        strComparableCollectionArray76[0] = strComparableList43;
        strComparableCollectionArray76[1] = strComparableList50;
        strComparableCollectionArray76[2] = strComparableList56;
        strComparableCollectionArray76[3] = strComparableList63;
        strComparableCollectionArray76[4] = strComparableList70;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray87 = strComparableQueue38.toArray(strComparableCollectionArray76);
        boolean boolean88 = strComparableQueue32.contains((java.lang.Object) strComparableCollectionArray87);
        java.lang.String str89 = strComparableQueue32.toString();
        boolean boolean90 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparableStream46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparableStream59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strComparableStream66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strComparableStream73);
        org.junit.Assert.assertNotNull(abstractCollectionArray75);
        org.junit.Assert.assertNotNull(strComparableCollectionArray76);
        org.junit.Assert.assertNotNull(strComparableCollectionArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "[hi!]" + "'", str89.equals("[hi!]"));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        int int3 = strComparableQueue1.size();
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream5 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertNotNull(strComparableStream5);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue1.maxSize();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue1.poll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + strComparable14 + "' != '" + "" + "'", strComparable14.equals(""));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean4 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.remove();
        int int6 = strComparableQueue1.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        try {
            java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue1.get(3);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (3) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        int int15 = strComparableQueue9.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue1.poll();
        java.lang.Class<?> wildcardClass24 = strComparableQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        int int4 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean9 = strComparableList8.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue6.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList8);
        strComparableQueue6.clear();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue6.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue14.poll();
        java.lang.String str16 = strComparableQueue14.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor17 = strComparableQueue14.iterator();
        boolean boolean18 = strComparableQueue6.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean19 = strComparableQueue14.isAtFullCapacity();
        boolean boolean20 = strComparableQueue1.remove((java.lang.Object) boolean19);
        try {
            java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean9 = strComparableList8.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue6.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList8);
        strComparableQueue6.clear();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue6.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue14.poll();
        java.lang.String str16 = strComparableQueue14.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor17 = strComparableQueue14.iterator();
        boolean boolean18 = strComparableQueue6.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean19 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Class<?> wildcardClass35 = strComparableQueue13.getClass();
        boolean boolean36 = strComparableQueue13.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray26 = strComparableQueue25.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableQueue25.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.poll();
        boolean boolean32 = strComparableQueue29.offer((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        strComparableQueue36.clear();
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue36.poll();
        java.lang.String str43 = strComparableQueue36.toString();
        Tester.BoundedCollection[] boundedCollectionArray45 = new Tester.BoundedCollection[6];
        @SuppressWarnings("unchecked") Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray46 = (Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[]) boundedCollectionArray45;
        strComparableCollectionArray46[0] = strComparableQueue10;
        strComparableCollectionArray46[1] = strComparableQueue18;
        strComparableCollectionArray46[2] = strComparableQueue25;
        strComparableCollectionArray46[3] = strComparableQueue29;
        strComparableCollectionArray46[4] = strComparableQueue34;
        strComparableCollectionArray46[5] = strComparableQueue36;
        Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray59 = strComparableQueue4.toArray(strComparableCollectionArray46);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.lang.String[] strArray62 = strComparableQueue4.toArray(strArray61);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]" + "'", str43.equals("[]"));
        org.junit.Assert.assertNotNull(boundedCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray46);
        org.junit.Assert.assertNotNull(strComparableCollectionArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        boolean boolean52 = strComparableQueue1.isAtFullCapacity();
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection53 = null;
        try {
            boolean boolean54 = strComparableQueue1.containsAll(strComparableCollection53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue5.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        boolean boolean12 = strComparableQueue10.isAtFullCapacity();
        java.lang.Object[] objArray13 = strComparableQueue10.toArray();
        int int14 = strComparableQueue10.maxSize();
        boolean boolean15 = strComparableQueue5.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        boolean boolean16 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        boolean boolean18 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        try {
            java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue59.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.Class<?> wildcardClass2 = strComparableQueue1.getClass();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNull(strComparable3);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue45.poll();
        boolean boolean47 = strComparableQueue45.isAtFullCapacity();
        java.lang.Object[] objArray48 = strComparableQueue45.toArray();
        strComparableQueue45.clear();
        boolean boolean50 = strComparableQueue1.remove((java.lang.Object) strComparableQueue45);
        try {
            java.lang.Comparable<java.lang.String> strComparable52 = strComparableQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean23 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue1.remove();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + strComparable24 + "' != '" + "" + "'", strComparable24.equals(""));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.lang.Class<?> wildcardClass64 = strComparableQueue59.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue3.poll();
        java.lang.String str5 = strComparableQueue3.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue3.isEmpty();
        boolean boolean9 = strComparableQueue3.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue15.isEmpty();
        boolean boolean21 = strComparableQueue15.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean22 = strComparableQueue11.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        boolean boolean32 = strComparableQueue30.isAtFullCapacity();
        java.lang.Object[] objArray33 = strComparableQueue30.toArray();
        boolean boolean34 = strComparableQueue24.contains((java.lang.Object) objArray33);
        boolean boolean35 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue24);
        boolean boolean36 = strComparableQueue3.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean37 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.String str38 = strComparableQueue1.toString();
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]" + "'", str5.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]" + "'", str38.equals("[]"));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean23 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator25 = strComparableQueue1.spliterator();
        java.lang.Class<?> wildcardClass26 = strComparableQueue1.getClass();
        java.lang.Class<?> wildcardClass27 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + strComparable24 + "' != '" + "" + "'", strComparable24.equals(""));
        org.junit.Assert.assertNotNull(strComparableSpliterator25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean37 = strComparableQueue1.isEmpty();
        boolean boolean38 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        boolean boolean10 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.size();
        boolean boolean6 = strComparableQueue1.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        int int9 = strComparableQueue1.maxSize();
        try {
            java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        java.lang.String str23 = strComparableQueue1.toString();
        boolean boolean24 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray25 = strComparableQueue1.toArray();
        boolean boolean26 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int5 = strComparableQueue1.size();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor5 = strComparableQueue1.iterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparableItor5);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue59.iterator();
        boolean boolean65 = strComparableQueue59.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        boolean boolean69 = strComparableQueue65.isEmpty();
        java.lang.Object[] objArray70 = strComparableQueue65.toArray();
        boolean boolean71 = strComparableQueue59.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue65);
        boolean boolean73 = strComparableQueue65.add((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean9 = strComparableList8.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue6.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList8);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream11 = strComparableList8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream18 = strComparableList15.stream();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableList15.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList23 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean24 = strComparableList23.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean25 = strComparableQueue21.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList23);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream26 = strComparableList23.stream();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator27 = strComparableList23.spliterator();
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] { strComparableList8, strComparableList15, strComparableList23 };
        java.util.RandomAccess[] randomAccessArray29 = strComparableQueue1.toArray(randomAccessArray28);
        try {
            java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strComparableStream11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableStream18);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableStream26);
        org.junit.Assert.assertNotNull(strComparableSpliterator27);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue4.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue4.iterator();
        boolean boolean15 = strComparableQueue4.isAtFullCapacity();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        try {
            java.lang.Comparable<java.lang.String> strComparable52 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        boolean boolean43 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.lang.Object[] objArray44 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray47 = strComparableQueue46.toArray();
        int int48 = strComparableQueue46.size();
        boolean boolean49 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        try {
            java.lang.Comparable<java.lang.String> strComparable51 = strComparableQueue1.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue5.get(0);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + strComparable14 + "' != '" + "" + "'", strComparable14.equals(""));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        boolean boolean43 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.lang.Object[] objArray44 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray47 = strComparableQueue46.toArray();
        int int48 = strComparableQueue46.size();
        boolean boolean49 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        boolean boolean50 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        boolean boolean5 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray14 = strComparableQueue13.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream21 = strComparableList18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableList31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList45 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean46 = strComparableList45.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean47 = strComparableQueue43.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList45);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream48 = strComparableList45.stream();
        java.util.AbstractCollection[] abstractCollectionArray50 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray51 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray50;
        strComparableCollectionArray51[0] = strComparableList18;
        strComparableCollectionArray51[1] = strComparableList25;
        strComparableCollectionArray51[2] = strComparableList31;
        strComparableCollectionArray51[3] = strComparableList38;
        strComparableCollectionArray51[4] = strComparableList45;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray62 = strComparableQueue13.toArray(strComparableCollectionArray51);
        boolean boolean63 = strComparableQueue7.contains((java.lang.Object) strComparableCollectionArray62);
        int int64 = strComparableQueue7.maxSize();
        strComparableQueue7.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue67 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable68 = strComparableQueue67.poll();
        java.lang.String str69 = strComparableQueue67.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor70 = strComparableQueue67.iterator();
        boolean boolean71 = strComparableQueue67.isEmpty();
        java.lang.Object[] objArray72 = strComparableQueue67.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue74 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean75 = strComparableQueue67.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue74);
        java.lang.String str76 = strComparableQueue67.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue78 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableQueue78.poll();
        boolean boolean81 = strComparableQueue78.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable82 = strComparableQueue78.remove();
        boolean boolean83 = strComparableQueue67.contains((java.lang.Object) strComparableQueue78);
        boolean boolean84 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue78);
        boolean boolean85 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        strComparableQueue7.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strComparableStream21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableStream48);
        org.junit.Assert.assertNotNull(abstractCollectionArray50);
        org.junit.Assert.assertNotNull(strComparableCollectionArray51);
        org.junit.Assert.assertNotNull(strComparableCollectionArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(strComparable68);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[]" + "'", str69.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[]" + "'", str76.equals("[]"));
        org.junit.Assert.assertNull(strComparable79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + strComparable82 + "' != '" + "" + "'", strComparable82.equals(""));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        int int69 = strComparableQueue65.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList73 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean74 = strComparableList73.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean75 = strComparableQueue71.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList73);
        strComparableQueue71.clear();
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableQueue71.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue79 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableQueue79.poll();
        java.lang.String str81 = strComparableQueue79.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor82 = strComparableQueue79.iterator();
        boolean boolean83 = strComparableQueue71.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue79);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream84 = strComparableQueue79.parallelStream();
        boolean boolean85 = strComparableQueue65.contains((java.lang.Object) strComparableStream84);
        boolean boolean87 = strComparableQueue65.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable88 = strComparableQueue65.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator89 = strComparableQueue65.spliterator();
        boolean boolean90 = strComparableQueue59.contains((java.lang.Object) strComparableSpliterator89);
        java.lang.Class<?> wildcardClass91 = strComparableSpliterator89.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(strComparable77);
        org.junit.Assert.assertNull(strComparable80);
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "[]" + "'", str81.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strComparableStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + strComparable88 + "' != '" + "" + "'", strComparable88.equals(""));
        org.junit.Assert.assertNotNull(strComparableSpliterator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList21 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean22 = strComparableList21.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList21);
        strComparableQueue19.clear();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        java.lang.String str29 = strComparableQueue27.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor30 = strComparableQueue27.iterator();
        boolean boolean31 = strComparableQueue19.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream32 = strComparableQueue27.parallelStream();
        boolean boolean33 = strComparableQueue9.contains((java.lang.Object) strComparableQueue27);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue27.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]" + "'", str29.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strComparable34);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        try {
            java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue1.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray20 = strComparableQueue19.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        java.util.AbstractCollection[] abstractCollectionArray56 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray57 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray56;
        strComparableCollectionArray57[0] = strComparableList24;
        strComparableCollectionArray57[1] = strComparableList31;
        strComparableCollectionArray57[2] = strComparableList37;
        strComparableCollectionArray57[3] = strComparableList44;
        strComparableCollectionArray57[4] = strComparableList51;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray68 = strComparableQueue19.toArray(strComparableCollectionArray57);
        boolean boolean69 = strComparableQueue13.contains((java.lang.Object) strComparableCollectionArray68);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream72 = strComparableQueue71.stream();
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue71.poll();
        java.lang.Object[] objArray74 = strComparableQueue71.toArray();
        boolean boolean75 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        boolean boolean76 = strComparableQueue8.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        int int77 = strComparableQueue8.maxSize();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(abstractCollectionArray56);
        org.junit.Assert.assertNotNull(strComparableCollectionArray57);
        org.junit.Assert.assertNotNull(strComparableCollectionArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableStream72);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator26 = strComparableQueue14.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList30 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean31 = strComparableList30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean32 = strComparableQueue28.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList30);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        java.lang.String str36 = strComparableQueue34.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableQueue34.iterator();
        boolean boolean38 = strComparableQueue34.isEmpty();
        java.lang.Object[] objArray39 = strComparableQueue34.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean42 = strComparableQueue34.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue41);
        boolean boolean43 = strComparableQueue28.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue41);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean46 = strComparableQueue45.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableQueue45.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor48 = strComparableQueue45.iterator();
        boolean boolean49 = strComparableQueue45.isEmpty();
        boolean boolean50 = strComparableQueue41.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue45);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue52.poll();
        java.lang.String str54 = strComparableQueue52.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor55 = strComparableQueue52.iterator();
        boolean boolean56 = strComparableQueue52.isEmpty();
        java.lang.Object[] objArray57 = strComparableQueue52.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean60 = strComparableQueue52.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        boolean boolean62 = strComparableQueue59.remove((java.lang.Object) 10L);
        boolean boolean63 = strComparableQueue41.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        int int64 = strComparableQueue59.maxSize();
        boolean boolean65 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]" + "'", str36.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + strComparable47 + "' != '" + "" + "'", strComparable47.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strComparable53);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[]" + "'", str54.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue16.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList21 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean22 = strComparableList21.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList21);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream24 = strComparableList21.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableQueue26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList34 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean35 = strComparableList34.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean36 = strComparableQueue32.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList34);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream37 = strComparableList34.stream();
        java.util.stream.Stream[] streamArray39 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray40 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray39;
        strComparableStreamArray40[0] = strComparableStream24;
        strComparableStreamArray40[1] = strComparableStream27;
        strComparableStreamArray40[2] = strComparableStream30;
        strComparableStreamArray40[3] = strComparableStream37;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray49 = strComparableQueue16.toArray(strComparableStreamArray40);
        boolean boolean50 = strComparableQueue16.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList54 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean55 = strComparableList54.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean56 = strComparableQueue52.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList54);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream57 = strComparableList54.stream();
        boolean boolean58 = strComparableQueue16.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList54);
        java.lang.Object[] objArray59 = strComparableQueue16.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray62 = strComparableQueue61.toArray();
        int int63 = strComparableQueue61.size();
        boolean boolean64 = strComparableQueue16.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        boolean boolean65 = strComparableQueue9.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue16);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strComparableStream24);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparableStream37);
        org.junit.Assert.assertNotNull(streamArray39);
        org.junit.Assert.assertNotNull(strComparableStreamArray40);
        org.junit.Assert.assertNotNull(strComparableStreamArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strComparableStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue26.poll();
        boolean boolean28 = strComparableQueue26.isAtFullCapacity();
        boolean boolean29 = strComparableQueue23.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue26);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream32 = strComparableQueue31.stream();
        boolean boolean33 = strComparableQueue26.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str36 = strComparableQueue35.toString();
        boolean boolean37 = strComparableQueue31.remove((java.lang.Object) str36);
        boolean boolean38 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNull(strComparable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strComparableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]" + "'", str36.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue1.poll();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable23);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator15 = strComparableQueue13.spliterator();
        java.lang.String str16 = strComparableQueue13.toString();
        boolean boolean17 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream18 = strComparableQueue8.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(strComparableSpliterator15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableStream18);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        Tester.CircularFifoQueue<java.lang.String[]> strArrayQueue0 = new Tester.CircularFifoQueue<java.lang.String[]>();
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList21 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean22 = strComparableList21.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList21);
        strComparableQueue19.clear();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        java.lang.String str29 = strComparableQueue27.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor30 = strComparableQueue27.iterator();
        boolean boolean31 = strComparableQueue19.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream32 = strComparableQueue27.parallelStream();
        boolean boolean33 = strComparableQueue9.contains((java.lang.Object) strComparableQueue27);
        try {
            java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue9.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]" + "'", str29.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection64 = null;
        boolean boolean65 = strComparableQueue59.retainAll(strComparableCollection64);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue67 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean68 = strComparableQueue67.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean70 = strComparableQueue67.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean71 = strComparableQueue59.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue67);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Class<?> wildcardClass31 = strComparableQueue27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] { wildcardClass31 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = strComparableQueue1.toArray(genericDeclarationArray32);
        strComparableQueue1.clear();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator35 = strComparableQueue1.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNotNull(strComparableSpliterator35);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        try {
            java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue9.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue9.peek();
        boolean boolean17 = strComparableQueue9.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue9.iterator();
        boolean boolean20 = strComparableQueue9.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        Tester.CircularFifoQueue<Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>> strComparableCollectionQueue0 = new Tester.CircularFifoQueue<Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>>();
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue6.poll();
        java.lang.String str8 = strComparableQueue6.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue6.iterator();
        int int10 = strComparableQueue6.maxSize();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue6);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray20 = strComparableQueue19.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        java.util.AbstractCollection[] abstractCollectionArray56 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray57 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray56;
        strComparableCollectionArray57[0] = strComparableList24;
        strComparableCollectionArray57[1] = strComparableList31;
        strComparableCollectionArray57[2] = strComparableList37;
        strComparableCollectionArray57[3] = strComparableList44;
        strComparableCollectionArray57[4] = strComparableList51;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray68 = strComparableQueue19.toArray(strComparableCollectionArray57);
        boolean boolean69 = strComparableQueue13.contains((java.lang.Object) strComparableCollectionArray68);
        java.lang.String str70 = strComparableQueue13.toString();
        boolean boolean71 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(abstractCollectionArray56);
        org.junit.Assert.assertNotNull(strComparableCollectionArray57);
        org.junit.Assert.assertNotNull(strComparableCollectionArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[hi!]" + "'", str70.equals("[hi!]"));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        boolean boolean43 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        boolean boolean45 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean46 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray14 = strComparableQueue13.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream21 = strComparableList18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableList31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList45 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean46 = strComparableList45.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean47 = strComparableQueue43.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList45);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream48 = strComparableList45.stream();
        java.util.AbstractCollection[] abstractCollectionArray50 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray51 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray50;
        strComparableCollectionArray51[0] = strComparableList18;
        strComparableCollectionArray51[1] = strComparableList25;
        strComparableCollectionArray51[2] = strComparableList31;
        strComparableCollectionArray51[3] = strComparableList38;
        strComparableCollectionArray51[4] = strComparableList45;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray62 = strComparableQueue13.toArray(strComparableCollectionArray51);
        strComparableQueue13.clear();
        boolean boolean64 = strComparableQueue8.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strComparableStream21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableStream48);
        org.junit.Assert.assertNotNull(abstractCollectionArray50);
        org.junit.Assert.assertNotNull(strComparableCollectionArray51);
        org.junit.Assert.assertNotNull(strComparableCollectionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue36 = new Tester.CircularFifoQueue<java.lang.reflect.Type>((int) (short) 10);
        boolean boolean37 = strComparableQueue1.remove((java.lang.Object) typeQueue36);
        boolean boolean39 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        java.lang.Object[] objArray11 = strComparableQueue1.toArray();
        strComparableQueue1.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNotNull(objArray11);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        java.lang.String str3 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue9.peek();
        boolean boolean17 = strComparableQueue9.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue9.iterator();
        java.lang.Class<?> wildcardClass19 = strComparableQueue9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.parallelStream();
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection9 = null;
        try {
            boolean boolean10 = strComparableQueue1.addAll(strComparableCollection9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        Tester.CircularFifoQueue<java.lang.reflect.AnnotatedElement> annotatedElementQueue1 = new Tester.CircularFifoQueue<java.lang.reflect.AnnotatedElement>(5);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.Object[] objArray13 = strComparableQueue8.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        java.lang.String str63 = strComparableQueue61.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue61.iterator();
        boolean boolean65 = strComparableQueue61.isEmpty();
        java.lang.Object[] objArray66 = strComparableQueue61.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean69 = strComparableQueue61.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        java.lang.String str70 = strComparableQueue61.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        boolean boolean75 = strComparableQueue72.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue72.remove();
        boolean boolean77 = strComparableQueue61.contains((java.lang.Object) strComparableQueue72);
        boolean boolean78 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue79 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]" + "'", str63.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + strComparable76 + "' != '" + "" + "'", strComparable76.equals(""));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue8.peek();
        java.lang.Object obj18 = null;
        boolean boolean19 = strComparableQueue8.remove(obj18);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.peek();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        try {
            java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(objArray6);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        try {
            java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue1.get((-1));
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        boolean boolean13 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        int int3 = strComparableQueue1.size();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator4 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strComparableSpliterator4);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        Tester.CircularFifoQueue<java.lang.AutoCloseable> autoCloseableQueue1 = new Tester.CircularFifoQueue<java.lang.AutoCloseable>((int) ' ');
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable72 = strComparableQueue71.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue74 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableQueue74.poll();
        boolean boolean76 = strComparableQueue74.isAtFullCapacity();
        boolean boolean77 = strComparableQueue71.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue74);
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableQueue74.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue80 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor81 = strComparableQueue80.iterator();
        boolean boolean82 = strComparableQueue74.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue80);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor83 = strComparableQueue74.iterator();
        boolean boolean84 = strComparableQueue53.remove((java.lang.Object) strComparableItor83);
        boolean boolean85 = strComparableQueue53.isEmpty();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strComparable72);
        org.junit.Assert.assertNull(strComparable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(strComparable78);
        org.junit.Assert.assertNotNull(strComparableItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strComparableItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue3.poll();
        boolean boolean5 = strComparableQueue3.isAtFullCapacity();
        java.lang.Object[] objArray6 = strComparableQueue3.toArray();
        strComparableQueue3.clear();
        int int8 = strComparableQueue3.size();
        boolean boolean9 = strComparableQueue1.remove((java.lang.Object) strComparableQueue3);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue3.stream();
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparableStream10);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        java.lang.Object[] objArray24 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList28 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean29 = strComparableList28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean30 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList28);
        strComparableQueue26.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        boolean boolean36 = strComparableQueue33.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean37 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        int int38 = strComparableQueue33.size();
        boolean boolean39 = strComparableQueue33.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        boolean boolean41 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        boolean boolean42 = strComparableQueue33.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        int int4 = strComparableQueue1.maxSize();
        boolean boolean5 = strComparableQueue1.isFull();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue15.spliterator();
        boolean boolean18 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean19 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue8.stream();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue8.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNull(strComparable21);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        boolean boolean17 = strComparableQueue15.isAtFullCapacity();
        java.lang.Object[] objArray18 = strComparableQueue15.toArray();
        strComparableQueue15.clear();
        boolean boolean20 = strComparableQueue7.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.String str21 = strComparableQueue15.toString();
        int int22 = strComparableQueue15.maxSize();
        boolean boolean23 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        try {
            java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue15.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]" + "'", str21.equals("[]"));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList73 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean74 = strComparableList73.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean75 = strComparableQueue71.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList73);
        strComparableQueue71.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue78 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor79 = strComparableQueue78.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue81 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable82 = strComparableQueue81.poll();
        java.lang.String str83 = strComparableQueue81.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor84 = strComparableQueue81.iterator();
        java.util.Iterator[] iteratorArray86 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray87 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray86;
        strComparableItorArray87[0] = strComparableItor79;
        strComparableItorArray87[1] = strComparableItor84;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray92 = strComparableQueue71.toArray(strComparableItorArray87);
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray93 = strComparableQueue53.toArray(strComparableItorArray87);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strComparableItor79);
        org.junit.Assert.assertNull(strComparable82);
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "[]" + "'", str83.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor84);
        org.junit.Assert.assertNotNull(iteratorArray86);
        org.junit.Assert.assertNotNull(strComparableItorArray87);
        org.junit.Assert.assertNotNull(strComparableItorArray92);
        org.junit.Assert.assertNotNull(strComparableItorArray93);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        boolean boolean4 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        int int16 = strComparableQueue12.maxSize();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue12.peek();
        boolean boolean18 = strComparableQueue1.remove((java.lang.Object) strComparable17);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        boolean boolean23 = strComparableQueue21.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator27 = strComparableQueue25.spliterator();
        boolean boolean28 = strComparableQueue21.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        java.lang.String str32 = strComparableQueue30.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableQueue30.iterator();
        boolean boolean34 = strComparableQueue30.isEmpty();
        java.lang.Object[] objArray35 = strComparableQueue30.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray38 = strComparableQueue37.toArray();
        int int39 = strComparableQueue37.size();
        boolean boolean40 = strComparableQueue30.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue37);
        boolean boolean41 = strComparableQueue21.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        boolean boolean43 = strComparableQueue30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean44 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        java.lang.Object obj45 = null;
        boolean boolean46 = strComparableQueue1.contains(obj45);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertNotNull(strComparableSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]" + "'", str32.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableItor2);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream3 = strComparableQueue1.stream();
        boolean boolean4 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray7 = strComparableQueue6.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList11 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean12 = strComparableList11.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean13 = strComparableQueue9.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList11);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream14 = strComparableList11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableList31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        java.util.AbstractCollection[] abstractCollectionArray43 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray44 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray43;
        strComparableCollectionArray44[0] = strComparableList11;
        strComparableCollectionArray44[1] = strComparableList18;
        strComparableCollectionArray44[2] = strComparableList24;
        strComparableCollectionArray44[3] = strComparableList31;
        strComparableCollectionArray44[4] = strComparableList38;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray55 = strComparableQueue6.toArray(strComparableCollectionArray44);
        strComparableQueue6.clear();
        boolean boolean57 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream58 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableStream14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertNotNull(abstractCollectionArray43);
        org.junit.Assert.assertNotNull(strComparableCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream58);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        int int17 = strComparableQueue8.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        boolean boolean7 = strComparableQueue5.isEmpty();
        boolean boolean8 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue5.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Class<?> wildcardClass8 = strComparableQueue4.getClass();
        boolean boolean10 = strComparableQueue4.offer((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList14 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean15 = strComparableList14.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean16 = strComparableQueue12.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList14);
        strComparableQueue12.clear();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue12.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        strComparableQueue20.clear();
        boolean boolean25 = strComparableQueue12.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue20);
        java.lang.String str26 = strComparableQueue12.toString();
        java.lang.Class<?> wildcardClass27 = strComparableQueue12.getClass();
        boolean boolean29 = strComparableQueue12.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean30 = strComparableQueue4.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue12.element();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable18);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + strComparable31 + "' != '" + "" + "'", strComparable31.equals(""));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        Tester.CircularFifoQueue<java.util.Iterator<java.lang.Comparable<java.lang.String>>[]> comparableItorArrayQueue0 = new Tester.CircularFifoQueue<java.util.Iterator<java.lang.Comparable<java.lang.String>>[]>();
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue1.stream();
        java.lang.Class<?> wildcardClass18 = strComparableStream17.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean37 = strComparableQueue1.isEmpty();
        int int38 = strComparableQueue1.size();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream39 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strComparableStream39);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue1.remove();
        java.lang.Object[] objArray38 = strComparableQueue1.toArray();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + strComparable37 + "' != '" + "[]" + "'", strComparable37.equals("[]"));
        org.junit.Assert.assertNotNull(objArray38);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray16 = strComparableQueue15.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableList20.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableList40.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList47 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean48 = strComparableList47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean49 = strComparableQueue45.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList47);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableList47.stream();
        java.util.AbstractCollection[] abstractCollectionArray52 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray53 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray52;
        strComparableCollectionArray53[0] = strComparableList20;
        strComparableCollectionArray53[1] = strComparableList27;
        strComparableCollectionArray53[2] = strComparableList33;
        strComparableCollectionArray53[3] = strComparableList40;
        strComparableCollectionArray53[4] = strComparableList47;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray64 = strComparableQueue15.toArray(strComparableCollectionArray53);
        boolean boolean65 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.Class<?> wildcardClass66 = strComparableQueue8.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(abstractCollectionArray52);
        org.junit.Assert.assertNotNull(strComparableCollectionArray53);
        org.junit.Assert.assertNotNull(strComparableCollectionArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue4.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableList17.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue22.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream26 = strComparableQueue25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList30 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean31 = strComparableList30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean32 = strComparableQueue28.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList30);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableList30.stream();
        java.util.stream.Stream[] streamArray35 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray36 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray35;
        strComparableStreamArray36[0] = strComparableStream20;
        strComparableStreamArray36[1] = strComparableStream23;
        strComparableStreamArray36[2] = strComparableStream26;
        strComparableStreamArray36[3] = strComparableStream33;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray45 = strComparableQueue12.toArray(strComparableStreamArray36);
        boolean boolean46 = strComparableQueue12.isEmpty();
        boolean boolean47 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray50 = strComparableQueue49.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList54 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean55 = strComparableList54.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean56 = strComparableQueue52.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList54);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream57 = strComparableList54.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList61 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean62 = strComparableList61.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean63 = strComparableQueue59.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList61);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList67 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean68 = strComparableList67.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean69 = strComparableQueue65.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList67);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream70 = strComparableList67.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList74 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean75 = strComparableList74.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean76 = strComparableQueue72.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList74);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream77 = strComparableList74.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue79 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList81 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean82 = strComparableList81.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean83 = strComparableQueue79.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList81);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream84 = strComparableList81.stream();
        java.util.AbstractCollection[] abstractCollectionArray86 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray87 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray86;
        strComparableCollectionArray87[0] = strComparableList54;
        strComparableCollectionArray87[1] = strComparableList61;
        strComparableCollectionArray87[2] = strComparableList67;
        strComparableCollectionArray87[3] = strComparableList74;
        strComparableCollectionArray87[4] = strComparableList81;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray98 = strComparableQueue49.toArray(strComparableCollectionArray87);
        try {
            java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray99 = strComparableQueue4.toArray(strComparableCollectionArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(strComparableStream26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertNotNull(streamArray35);
        org.junit.Assert.assertNotNull(strComparableStreamArray36);
        org.junit.Assert.assertNotNull(strComparableStreamArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strComparableStream57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strComparableStream70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strComparableStream77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strComparableStream84);
        org.junit.Assert.assertNotNull(abstractCollectionArray86);
        org.junit.Assert.assertNotNull(strComparableCollectionArray87);
        org.junit.Assert.assertNotNull(strComparableCollectionArray98);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue59.iterator();
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue59.peek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertNull(strComparable65);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        Tester.CircularFifoQueue<java.lang.Class<?>> wildcardClassQueue1 = new Tester.CircularFifoQueue<java.lang.Class<?>>(6);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        boolean boolean13 = strComparableQueue4.offer((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        boolean boolean5 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        boolean boolean17 = strComparableQueue15.isAtFullCapacity();
        java.lang.Object[] objArray18 = strComparableQueue15.toArray();
        strComparableQueue15.clear();
        boolean boolean20 = strComparableQueue7.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.String str21 = strComparableQueue7.toString();
        java.lang.Class<?> wildcardClass22 = strComparableQueue7.getClass();
        boolean boolean24 = strComparableQueue7.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean25 = strComparableQueue1.contains((java.lang.Object) boolean24);
        boolean boolean27 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]" + "'", str21.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        strComparableQueue10.clear();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        java.lang.String str20 = strComparableQueue18.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue10.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean31 = strComparableQueue10.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean32 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Object[] objArray33 = strComparableQueue27.toArray();
        java.lang.Class<?> wildcardClass34 = objArray33.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]" + "'", str20.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        java.lang.Class<?> wildcardClass6 = strComparableQueue1.getClass();
        boolean boolean8 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue1.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.peek();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue1.spliterator();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator8 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
        org.junit.Assert.assertNotNull(strComparableSpliterator8);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        int int4 = strComparableQueue1.maxSize();
        boolean boolean5 = strComparableQueue1.isFull();
        int int6 = strComparableQueue1.size();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int5 = strComparableQueue1.size();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(strComparableStream6);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        boolean boolean4 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray16 = strComparableQueue15.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableList20.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableList40.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList47 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean48 = strComparableList47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean49 = strComparableQueue45.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList47);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableList47.stream();
        java.util.AbstractCollection[] abstractCollectionArray52 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray53 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray52;
        strComparableCollectionArray53[0] = strComparableList20;
        strComparableCollectionArray53[1] = strComparableList27;
        strComparableCollectionArray53[2] = strComparableList33;
        strComparableCollectionArray53[3] = strComparableList40;
        strComparableCollectionArray53[4] = strComparableList47;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray64 = strComparableQueue15.toArray(strComparableCollectionArray53);
        boolean boolean65 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream66 = strComparableQueue8.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(abstractCollectionArray52);
        org.junit.Assert.assertNotNull(strComparableCollectionArray53);
        org.junit.Assert.assertNotNull(strComparableCollectionArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strComparableStream66);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        boolean boolean18 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue1.element();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + strComparable19 + "' != '" + "" + "'", strComparable19.equals(""));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue36 = new Tester.CircularFifoQueue<java.lang.reflect.Type>((int) (short) 10);
        boolean boolean37 = strComparableQueue1.remove((java.lang.Object) typeQueue36);
        java.lang.Class<?> wildcardClass38 = typeQueue36.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator26 = strComparableQueue14.spliterator();
        boolean boolean27 = strComparableQueue14.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertNotNull(strComparableItor4);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableQueue9.peek();
        boolean boolean55 = strComparableQueue9.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(strComparable54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream3 = strComparableQueue1.stream();
        boolean boolean4 = strComparableQueue1.isAtFullCapacity();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator5 = strComparableQueue1.spliterator();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.poll();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator5);
        org.junit.Assert.assertNull(strComparable6);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        boolean boolean2 = strComparableQueue1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor38 = strComparableQueue37.iterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream39 = strComparableQueue37.stream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparableItor38);
        org.junit.Assert.assertNotNull(strComparableStream39);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList21 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean22 = strComparableList21.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList21);
        strComparableQueue19.clear();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        java.lang.String str29 = strComparableQueue27.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor30 = strComparableQueue27.iterator();
        boolean boolean31 = strComparableQueue19.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream32 = strComparableQueue27.parallelStream();
        boolean boolean33 = strComparableQueue9.contains((java.lang.Object) strComparableQueue27);
        boolean boolean35 = strComparableQueue27.remove((java.lang.Object) (-1));
        int int36 = strComparableQueue27.maxSize();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]" + "'", str29.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strComparableStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Class<?> wildcardClass35 = strComparableQueue13.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream7 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableStream7);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        strComparableQueue1.clear();
        int int6 = strComparableQueue1.size();
        java.lang.Object[] objArray7 = strComparableQueue1.toArray();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objArray7);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue5.spliterator();
        boolean boolean8 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream11 = strComparableQueue10.stream();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue10.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue10.peek();
        java.lang.Object[] objArray15 = strComparableQueue10.toArray();
        boolean boolean16 = strComparableQueue1.remove((java.lang.Object) objArray15);
        java.lang.Class<?> wildcardClass17 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparableStream11);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        boolean boolean15 = strComparableQueue13.isAtFullCapacity();
        boolean boolean16 = strComparableQueue10.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue13.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor20 = strComparableQueue19.iterator();
        boolean boolean21 = strComparableQueue13.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean22 = strComparableQueue1.contains((java.lang.Object) boolean21);
        int int23 = strComparableQueue1.size();
        java.lang.String str24 = strComparableQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertNotNull(strComparableItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue15.poll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strComparable17);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        int int2 = strComparableQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int5 = strComparableQueue1.size();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream8);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        int int23 = strComparableQueue1.maxSize();
        boolean boolean24 = strComparableQueue1.isEmpty();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator25 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator25);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        boolean boolean14 = strComparableQueue8.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        strComparableQueue16.clear();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue16.poll();
        java.lang.String str23 = strComparableQueue16.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        strComparableQueue25.clear();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue25.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        java.lang.String str35 = strComparableQueue33.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor36 = strComparableQueue33.iterator();
        boolean boolean37 = strComparableQueue25.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue42.isAtFullCapacity();
        boolean boolean45 = strComparableQueue39.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean46 = strComparableQueue25.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean47 = strComparableQueue16.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        java.lang.Object[] objArray48 = strComparableQueue42.toArray();
        boolean boolean49 = strComparableQueue8.remove((java.lang.Object) strComparableQueue42);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableQueue51.poll();
        java.lang.String str53 = strComparableQueue51.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor54 = strComparableQueue51.iterator();
        int int55 = strComparableQueue51.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue57 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList59 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean60 = strComparableList59.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean61 = strComparableQueue57.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList59);
        strComparableQueue57.clear();
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableQueue57.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        boolean boolean69 = strComparableQueue57.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue65);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream70 = strComparableQueue65.parallelStream();
        boolean boolean71 = strComparableQueue51.contains((java.lang.Object) strComparableStream70);
        boolean boolean72 = strComparableQueue51.isFull();
        int int73 = strComparableQueue51.maxSize();
        boolean boolean74 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]" + "'", str35.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strComparable52);
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]" + "'", str53.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(strComparable63);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream3 = strComparableQueue1.parallelStream();
        java.lang.Class<?> wildcardClass4 = strComparableQueue1.getClass();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableStream3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator9 = strComparableQueue4.spliterator();
        int int10 = strComparableQueue4.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Object obj54 = null;
        boolean boolean55 = strComparableQueue19.remove(obj54);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator56 = strComparableQueue19.spliterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue19.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator56);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.peek();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue1.spliterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
        org.junit.Assert.assertNotNull(strComparableStream8);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        boolean boolean24 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator25 = strComparableQueue1.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator25);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        boolean boolean8 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator9 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator9);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        java.lang.CharSequence[] charSequenceArray73 = new java.lang.CharSequence[] { "hi!", "[]", "hi!" };
        java.lang.CharSequence[] charSequenceArray77 = new java.lang.CharSequence[] { "hi!", "[]", "hi!" };
        java.lang.CharSequence[][] charSequenceArray78 = new java.lang.CharSequence[][] { charSequenceArray73, charSequenceArray77 };
        java.lang.CharSequence[][] charSequenceArray79 = strComparableQueue53.toArray(charSequenceArray78);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charSequenceArray73);
        org.junit.Assert.assertNotNull(charSequenceArray77);
        org.junit.Assert.assertNotNull(charSequenceArray78);
        org.junit.Assert.assertNotNull(charSequenceArray79);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Object> objQueue10 = new Tester.CircularFifoQueue<java.lang.Object>();
        boolean boolean11 = strComparableQueue4.remove((java.lang.Object) objQueue10);
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        try {
            boolean boolean13 = strComparableQueue4.offer(strComparable12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        boolean boolean5 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean6 = strComparableQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor7 = strComparableQueue1.iterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableItor7);
        org.junit.Assert.assertNotNull(strComparableStream8);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        int int4 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean9 = strComparableList8.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue6.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList8);
        strComparableQueue6.clear();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue6.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue14.poll();
        java.lang.String str16 = strComparableQueue14.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor17 = strComparableQueue14.iterator();
        boolean boolean18 = strComparableQueue6.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean19 = strComparableQueue14.isAtFullCapacity();
        boolean boolean20 = strComparableQueue1.remove((java.lang.Object) boolean19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        java.lang.Object[] objArray27 = strComparableQueue22.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray30 = strComparableQueue29.toArray();
        int int31 = strComparableQueue29.size();
        boolean boolean32 = strComparableQueue22.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue29);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList36 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean37 = strComparableList36.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean38 = strComparableQueue34.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList36);
        strComparableQueue34.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor42 = strComparableQueue41.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue44.poll();
        java.lang.String str46 = strComparableQueue44.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor47 = strComparableQueue44.iterator();
        java.util.Iterator[] iteratorArray49 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray50 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray49;
        strComparableItorArray50[0] = strComparableItor42;
        strComparableItorArray50[1] = strComparableItor47;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray55 = strComparableQueue34.toArray(strComparableItorArray50);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream56 = strComparableQueue34.stream();
        boolean boolean57 = strComparableQueue22.remove((java.lang.Object) strComparableQueue34);
        boolean boolean58 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparableItor42);
        org.junit.Assert.assertNull(strComparable45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]" + "'", str46.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor47);
        org.junit.Assert.assertNotNull(iteratorArray49);
        org.junit.Assert.assertNotNull(strComparableItorArray50);
        org.junit.Assert.assertNotNull(strComparableItorArray55);
        org.junit.Assert.assertNotNull(strComparableStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue4.iterator();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strComparableItor13);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream3 = strComparableQueue1.stream();
        boolean boolean4 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray7 = strComparableQueue6.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList11 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean12 = strComparableList11.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean13 = strComparableQueue9.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList11);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream14 = strComparableList11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableList31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        java.util.AbstractCollection[] abstractCollectionArray43 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray44 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray43;
        strComparableCollectionArray44[0] = strComparableList11;
        strComparableCollectionArray44[1] = strComparableList18;
        strComparableCollectionArray44[2] = strComparableList24;
        strComparableCollectionArray44[3] = strComparableList31;
        strComparableCollectionArray44[4] = strComparableList38;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray55 = strComparableQueue6.toArray(strComparableCollectionArray44);
        strComparableQueue6.clear();
        boolean boolean57 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue6);
        boolean boolean58 = strComparableQueue6.isAtFullCapacity();
        java.lang.Class<?> wildcardClass59 = strComparableQueue6.getClass();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strComparableStream14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertNotNull(abstractCollectionArray43);
        org.junit.Assert.assertNotNull(strComparableCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.lang.CharSequence[] charSequenceArray69 = new java.lang.CharSequence[] { "", "[]", "", "[hi!]", "hi!" };
        java.lang.CharSequence[] charSequenceArray75 = new java.lang.CharSequence[] { "", "[]", "", "[hi!]", "hi!" };
        java.lang.CharSequence[][] charSequenceArray76 = new java.lang.CharSequence[][] { charSequenceArray69, charSequenceArray75 };
        try {
            java.lang.CharSequence[][] charSequenceArray77 = strComparableQueue1.toArray(charSequenceArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(charSequenceArray69);
        org.junit.Assert.assertNotNull(charSequenceArray75);
        org.junit.Assert.assertNotNull(charSequenceArray76);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableQueue1.element();
        boolean boolean66 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str2 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.get((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]" + "'", str2.equals("[]"));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        boolean boolean14 = strComparableQueue8.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue8.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparableItor16);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        int int4 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue6.poll();
        boolean boolean8 = strComparableQueue6.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean17 = strComparableQueue6.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList21 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean22 = strComparableList21.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList21);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        boolean boolean27 = strComparableQueue25.isAtFullCapacity();
        java.lang.Object[] objArray28 = strComparableQueue25.toArray();
        boolean boolean29 = strComparableQueue19.contains((java.lang.Object) objArray28);
        boolean boolean30 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean32 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean33 = strComparableQueue1.remove((java.lang.Object) strComparableQueue19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray42 = strComparableQueue41.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList46 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean47 = strComparableList46.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean48 = strComparableQueue44.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList46);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream49 = strComparableList46.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList53 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean54 = strComparableList53.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean55 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList53);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue57 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList59 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean60 = strComparableList59.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean61 = strComparableQueue57.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList59);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream62 = strComparableList59.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList66 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean67 = strComparableList66.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean68 = strComparableQueue64.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList66);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream69 = strComparableList66.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList73 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean74 = strComparableList73.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean75 = strComparableQueue71.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList73);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream76 = strComparableList73.stream();
        java.util.AbstractCollection[] abstractCollectionArray78 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray79 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray78;
        strComparableCollectionArray79[0] = strComparableList46;
        strComparableCollectionArray79[1] = strComparableList53;
        strComparableCollectionArray79[2] = strComparableList59;
        strComparableCollectionArray79[3] = strComparableList66;
        strComparableCollectionArray79[4] = strComparableList73;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray90 = strComparableQueue41.toArray(strComparableCollectionArray79);
        boolean boolean91 = strComparableQueue35.contains((java.lang.Object) strComparableCollectionArray90);
        int int92 = strComparableQueue35.maxSize();
        boolean boolean93 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue35);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strComparableStream49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strComparableStream62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparableStream69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strComparableStream76);
        org.junit.Assert.assertNotNull(abstractCollectionArray78);
        org.junit.Assert.assertNotNull(strComparableCollectionArray79);
        org.junit.Assert.assertNotNull(strComparableCollectionArray90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
        java.lang.String str60 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue62 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableQueue62.poll();
        java.lang.String str64 = strComparableQueue62.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor65 = strComparableQueue62.iterator();
        int int66 = strComparableQueue62.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList70 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean71 = strComparableList70.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean72 = strComparableQueue68.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList70);
        strComparableQueue68.clear();
        java.lang.Comparable<java.lang.String> strComparable74 = strComparableQueue68.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue76 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableQueue76.poll();
        java.lang.String str78 = strComparableQueue76.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor79 = strComparableQueue76.iterator();
        boolean boolean80 = strComparableQueue68.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue76);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream81 = strComparableQueue76.parallelStream();
        boolean boolean82 = strComparableQueue62.contains((java.lang.Object) strComparableStream81);
        boolean boolean84 = strComparableQueue62.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable85 = strComparableQueue62.element();
        boolean boolean86 = strComparableQueue1.remove((java.lang.Object) strComparableQueue62);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[hi!]" + "'", str60.equals("[hi!]"));
        org.junit.Assert.assertNull(strComparable63);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[]" + "'", str64.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(strComparable74);
        org.junit.Assert.assertNull(strComparable77);
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "[]" + "'", str78.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strComparableStream81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + strComparable85 + "' != '" + "" + "'", strComparable85.equals(""));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue44.poll();
        java.lang.String str46 = strComparableQueue44.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor47 = strComparableQueue44.iterator();
        boolean boolean48 = strComparableQueue44.isEmpty();
        java.lang.Object[] objArray49 = strComparableQueue44.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean52 = strComparableQueue44.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        boolean boolean53 = strComparableQueue38.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableQueue55.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue55.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor58 = strComparableQueue55.iterator();
        boolean boolean59 = strComparableQueue55.isEmpty();
        boolean boolean60 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        boolean boolean61 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        try {
            java.lang.Comparable<java.lang.String> strComparable63 = strComparableQueue1.get((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strComparable45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]" + "'", str46.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + strComparable57 + "' != '" + "" + "'", strComparable57.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        strComparableQueue1.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue3.poll();
        boolean boolean5 = strComparableQueue3.isAtFullCapacity();
        java.lang.Object[] objArray6 = strComparableQueue3.toArray();
        strComparableQueue3.clear();
        int int8 = strComparableQueue3.size();
        boolean boolean9 = strComparableQueue1.remove((java.lang.Object) strComparableQueue3);
        try {
            java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        java.lang.String str18 = strComparableQueue8.toString();
        java.lang.Class<?> wildcardClass19 = strComparableQueue8.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]" + "'", str18.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 1);
        boolean boolean2 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        boolean boolean5 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        boolean boolean17 = strComparableQueue15.isAtFullCapacity();
        java.lang.Object[] objArray18 = strComparableQueue15.toArray();
        strComparableQueue15.clear();
        boolean boolean20 = strComparableQueue7.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.String str21 = strComparableQueue7.toString();
        java.lang.Class<?> wildcardClass22 = strComparableQueue7.getClass();
        boolean boolean24 = strComparableQueue7.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean25 = strComparableQueue1.contains((java.lang.Object) boolean24);
        try {
            java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue1.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]" + "'", str21.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue44.poll();
        java.lang.String str46 = strComparableQueue44.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor47 = strComparableQueue44.iterator();
        boolean boolean48 = strComparableQueue44.isEmpty();
        java.lang.Object[] objArray49 = strComparableQueue44.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean52 = strComparableQueue44.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        boolean boolean53 = strComparableQueue38.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableQueue55.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue55.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor58 = strComparableQueue55.iterator();
        boolean boolean59 = strComparableQueue55.isEmpty();
        boolean boolean60 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        boolean boolean61 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        try {
            java.lang.Comparable<java.lang.String> strComparable63 = strComparableQueue1.get(100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strComparable45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "[]" + "'", str46.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + strComparable57 + "' != '" + "" + "'", strComparable57.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray20 = strComparableQueue19.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        java.util.AbstractCollection[] abstractCollectionArray56 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray57 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray56;
        strComparableCollectionArray57[0] = strComparableList24;
        strComparableCollectionArray57[1] = strComparableList31;
        strComparableCollectionArray57[2] = strComparableList37;
        strComparableCollectionArray57[3] = strComparableList44;
        strComparableCollectionArray57[4] = strComparableList51;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray68 = strComparableQueue19.toArray(strComparableCollectionArray57);
        boolean boolean69 = strComparableQueue13.contains((java.lang.Object) strComparableCollectionArray68);
        int int70 = strComparableQueue13.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        boolean boolean72 = strComparableQueue1.contains((java.lang.Object) strComparableQueue13);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(abstractCollectionArray56);
        org.junit.Assert.assertNotNull(strComparableCollectionArray57);
        org.junit.Assert.assertNotNull(strComparableCollectionArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue10.poll();
        boolean boolean15 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable72 = strComparableQueue71.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue74 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableQueue74.poll();
        boolean boolean76 = strComparableQueue74.isAtFullCapacity();
        boolean boolean77 = strComparableQueue71.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue74);
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableQueue74.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue80 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor81 = strComparableQueue80.iterator();
        boolean boolean82 = strComparableQueue74.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue80);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor83 = strComparableQueue74.iterator();
        boolean boolean84 = strComparableQueue53.remove((java.lang.Object) strComparableItor83);
        java.lang.Class<?> wildcardClass85 = strComparableItor83.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strComparable72);
        org.junit.Assert.assertNull(strComparable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(strComparable78);
        org.junit.Assert.assertNotNull(strComparableItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strComparableItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue5.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        boolean boolean12 = strComparableQueue10.isAtFullCapacity();
        java.lang.Object[] objArray13 = strComparableQueue10.toArray();
        int int14 = strComparableQueue10.maxSize();
        boolean boolean15 = strComparableQueue5.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        boolean boolean16 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue5.spliterator();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue5.poll();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertNull(strComparable18);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        strComparableQueue10.clear();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        java.lang.String str20 = strComparableQueue18.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue10.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean31 = strComparableQueue10.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean32 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        int int33 = strComparableQueue1.size();
        strComparableQueue1.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]" + "'", str20.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue4.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableList17.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue22.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream26 = strComparableQueue25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList30 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean31 = strComparableList30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean32 = strComparableQueue28.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList30);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableList30.stream();
        java.util.stream.Stream[] streamArray35 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray36 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray35;
        strComparableStreamArray36[0] = strComparableStream20;
        strComparableStreamArray36[1] = strComparableStream23;
        strComparableStreamArray36[2] = strComparableStream26;
        strComparableStreamArray36[3] = strComparableStream33;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray45 = strComparableQueue12.toArray(strComparableStreamArray36);
        boolean boolean46 = strComparableQueue12.isEmpty();
        boolean boolean47 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableQueue49.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue52.poll();
        boolean boolean54 = strComparableQueue52.isAtFullCapacity();
        boolean boolean55 = strComparableQueue49.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue52);
        java.lang.Class<?> wildcardClass56 = strComparableQueue52.getClass();
        boolean boolean58 = strComparableQueue52.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean59 = strComparableQueue52.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue52.stream();
        boolean boolean61 = strComparableQueue4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue52);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue4.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(strComparableStream26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertNotNull(streamArray35);
        org.junit.Assert.assertNotNull(strComparableStreamArray36);
        org.junit.Assert.assertNotNull(strComparableStreamArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strComparable50);
        org.junit.Assert.assertNull(strComparable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + strComparable62 + "' != '" + "hi!" + "'", strComparable62.equals("hi!"));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        boolean boolean14 = strComparableQueue8.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        strComparableQueue16.clear();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue16.poll();
        java.lang.String str23 = strComparableQueue16.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        strComparableQueue25.clear();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue25.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        java.lang.String str35 = strComparableQueue33.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor36 = strComparableQueue33.iterator();
        boolean boolean37 = strComparableQueue25.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue42.isAtFullCapacity();
        boolean boolean45 = strComparableQueue39.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean46 = strComparableQueue25.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean47 = strComparableQueue16.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        java.lang.Object[] objArray48 = strComparableQueue42.toArray();
        boolean boolean49 = strComparableQueue8.remove((java.lang.Object) strComparableQueue42);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableQueue51.poll();
        java.lang.String str53 = strComparableQueue51.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor54 = strComparableQueue51.iterator();
        int int55 = strComparableQueue51.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue57 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList59 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean60 = strComparableList59.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean61 = strComparableQueue57.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList59);
        strComparableQueue57.clear();
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableQueue57.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        boolean boolean69 = strComparableQueue57.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue65);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream70 = strComparableQueue65.parallelStream();
        boolean boolean71 = strComparableQueue51.contains((java.lang.Object) strComparableStream70);
        boolean boolean72 = strComparableQueue51.isFull();
        int int73 = strComparableQueue51.maxSize();
        boolean boolean74 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        boolean boolean75 = strComparableQueue51.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]" + "'", str35.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strComparable52);
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]" + "'", str53.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(strComparable63);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Class<?> wildcardClass31 = strComparableQueue27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] { wildcardClass31 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = strComparableQueue1.toArray(genericDeclarationArray32);
        boolean boolean35 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        java.lang.Object[] objArray24 = strComparableQueue1.toArray();
        boolean boolean25 = strComparableQueue1.isAtFullCapacity();
        boolean boolean27 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableQueue18.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue18.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue18.isEmpty();
        boolean boolean23 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        java.lang.String str27 = strComparableQueue25.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor28 = strComparableQueue25.iterator();
        boolean boolean29 = strComparableQueue25.isEmpty();
        java.lang.Object[] objArray30 = strComparableQueue25.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean33 = strComparableQueue25.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        boolean boolean35 = strComparableQueue32.remove((java.lang.Object) 10L);
        boolean boolean36 = strComparableQueue14.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        try {
            java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue32.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + strComparable20 + "' != '" + "" + "'", strComparable20.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]" + "'", str27.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Object obj54 = null;
        boolean boolean55 = strComparableQueue19.remove(obj54);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor56 = strComparableQueue19.iterator();
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue19.peek();
        int int58 = strComparableQueue19.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strComparableItor56);
        org.junit.Assert.assertNull(strComparable57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.String str22 = strComparableQueue19.toString();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]" + "'", str22.equals("[]"));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        java.lang.Object[] objArray64 = strComparableQueue1.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        java.lang.Object[] objArray24 = strComparableQueue1.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream25 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(strComparableStream25);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor44 = strComparableQueue1.iterator();
        try {
            java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue1.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparableItor44);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        java.lang.String str5 = strComparableQueue1.toString();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]" + "'", str5.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableStream6);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator15 = strComparableQueue13.spliterator();
        java.lang.String str16 = strComparableQueue13.toString();
        boolean boolean17 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue19.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.lang.String str25 = strComparableQueue23.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor26 = strComparableQueue23.iterator();
        boolean boolean27 = strComparableQueue23.isEmpty();
        boolean boolean29 = strComparableQueue23.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean30 = strComparableQueue19.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList34 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean35 = strComparableList34.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean36 = strComparableQueue32.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList34);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue38.poll();
        boolean boolean40 = strComparableQueue38.isAtFullCapacity();
        java.lang.Object[] objArray41 = strComparableQueue38.toArray();
        boolean boolean42 = strComparableQueue32.contains((java.lang.Object) objArray41);
        boolean boolean43 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator44 = strComparableQueue32.spliterator();
        boolean boolean45 = strComparableQueue13.contains((java.lang.Object) strComparableQueue32);
        boolean boolean47 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(strComparableSpliterator15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]" + "'", str25.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(strComparable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableQueue16.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean19 = strComparableQueue16.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int20 = strComparableQueue16.size();
        boolean boolean22 = strComparableQueue16.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue16.stream();
        java.util.stream.Stream[] streamArray25 = new java.util.stream.Stream[1];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray26 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray25;
        strComparableStreamArray26[0] = strComparableStream23;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean31 = strComparableQueue30.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean33 = strComparableQueue30.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int34 = strComparableQueue30.size();
        boolean boolean36 = strComparableQueue30.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream37 = strComparableQueue30.stream();
        java.util.stream.Stream[] streamArray39 = new java.util.stream.Stream[1];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray40 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray39;
        strComparableStreamArray40[0] = strComparableStream37;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableQueue44.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean47 = strComparableQueue44.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int48 = strComparableQueue44.size();
        boolean boolean50 = strComparableQueue44.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream51 = strComparableQueue44.stream();
        java.util.stream.Stream[] streamArray53 = new java.util.stream.Stream[1];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray54 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray53;
        strComparableStreamArray54[0] = strComparableStream51;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue58 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean59 = strComparableQueue58.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean61 = strComparableQueue58.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int62 = strComparableQueue58.size();
        boolean boolean64 = strComparableQueue58.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream65 = strComparableQueue58.stream();
        java.util.stream.Stream[] streamArray67 = new java.util.stream.Stream[1];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray68 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray67;
        strComparableStreamArray68[0] = strComparableStream65;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean73 = strComparableQueue72.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean75 = strComparableQueue72.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int76 = strComparableQueue72.size();
        boolean boolean78 = strComparableQueue72.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream79 = strComparableQueue72.stream();
        java.util.stream.Stream[] streamArray81 = new java.util.stream.Stream[1];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray82 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray81;
        strComparableStreamArray82[0] = strComparableStream79;
        java.util.stream.Stream[][] streamArray86 = new java.util.stream.Stream[5][];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[][] strComparableStreamArray87 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[][]) streamArray86;
        strComparableStreamArray87[0] = strComparableStreamArray26;
        strComparableStreamArray87[1] = strComparableStreamArray40;
        strComparableStreamArray87[2] = strComparableStreamArray54;
        strComparableStreamArray87[3] = strComparableStreamArray68;
        strComparableStreamArray87[4] = strComparableStreamArray82;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[][] strComparableStreamArray98 = strComparableQueue9.toArray(strComparableStreamArray87);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(streamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparableStream37);
        org.junit.Assert.assertNotNull(streamArray39);
        org.junit.Assert.assertNotNull(strComparableStreamArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strComparableStream51);
        org.junit.Assert.assertNotNull(streamArray53);
        org.junit.Assert.assertNotNull(strComparableStreamArray54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strComparableStream65);
        org.junit.Assert.assertNotNull(streamArray67);
        org.junit.Assert.assertNotNull(strComparableStreamArray68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strComparableStream79);
        org.junit.Assert.assertNotNull(streamArray81);
        org.junit.Assert.assertNotNull(strComparableStreamArray82);
        org.junit.Assert.assertNotNull(streamArray86);
        org.junit.Assert.assertNotNull(strComparableStreamArray87);
        org.junit.Assert.assertNotNull(strComparableStreamArray98);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue1.remove();
        boolean boolean36 = strComparableQueue1.isEmpty();
        try {
            java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + strComparable35 + "' != '" + "hi!" + "'", strComparable35.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        java.lang.String str5 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]" + "'", str5.equals("[]"));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue5.spliterator();
        boolean boolean8 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue5.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strComparable9);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator15 = strComparableQueue13.spliterator();
        java.lang.String str16 = strComparableQueue13.toString();
        boolean boolean17 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.String str18 = strComparableQueue8.toString();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(strComparableSpliterator15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]" + "'", str18.equals("[]"));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        int int9 = strComparableQueue1.maxSize();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue1.peek();
        java.lang.String[] strArray11 = new java.lang.String[] {};
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        java.lang.String[][] strArray13 = strComparableQueue1.toArray(strArray12);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue1.peek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(strComparable14);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        java.lang.Object[] objArray24 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList28 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean29 = strComparableList28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean30 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList28);
        strComparableQueue26.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        boolean boolean36 = strComparableQueue33.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean37 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        int int38 = strComparableQueue33.size();
        boolean boolean39 = strComparableQueue33.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        boolean boolean41 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(32);
        boolean boolean44 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue43);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isEmpty();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        strComparableQueue1.clear();
        int int6 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList10 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean11 = strComparableList10.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean12 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray15 = strComparableQueue14.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList46 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean47 = strComparableList46.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean48 = strComparableQueue44.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList46);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream49 = strComparableList46.stream();
        java.util.AbstractCollection[] abstractCollectionArray51 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray52 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray51;
        strComparableCollectionArray52[0] = strComparableList19;
        strComparableCollectionArray52[1] = strComparableList26;
        strComparableCollectionArray52[2] = strComparableList32;
        strComparableCollectionArray52[3] = strComparableList39;
        strComparableCollectionArray52[4] = strComparableList46;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray63 = strComparableQueue14.toArray(strComparableCollectionArray52);
        boolean boolean64 = strComparableQueue8.contains((java.lang.Object) strComparableCollectionArray63);
        int int65 = strComparableQueue8.maxSize();
        strComparableQueue8.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable69 = strComparableQueue68.poll();
        java.lang.String str70 = strComparableQueue68.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor71 = strComparableQueue68.iterator();
        boolean boolean72 = strComparableQueue68.isEmpty();
        java.lang.Object[] objArray73 = strComparableQueue68.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean76 = strComparableQueue68.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        java.lang.String str77 = strComparableQueue68.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue79 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableQueue79.poll();
        boolean boolean82 = strComparableQueue79.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable83 = strComparableQueue79.remove();
        boolean boolean84 = strComparableQueue68.contains((java.lang.Object) strComparableQueue79);
        boolean boolean85 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue79);
        boolean boolean86 = strComparableQueue1.contains((java.lang.Object) boolean85);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strComparableStream49);
        org.junit.Assert.assertNotNull(abstractCollectionArray51);
        org.junit.Assert.assertNotNull(strComparableCollectionArray52);
        org.junit.Assert.assertNotNull(strComparableCollectionArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(strComparable69);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "[]" + "'", str77.equals("[]"));
        org.junit.Assert.assertNull(strComparable80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + strComparable83 + "' != '" + "" + "'", strComparable83.equals(""));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue0 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        java.lang.Comparable<java.lang.String> strComparable1 = strComparableQueue0.poll();
        int int2 = strComparableQueue0.maxSize();
        strComparableQueue0.clear();
        org.junit.Assert.assertNull(strComparable1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean37 = strComparableQueue1.isEmpty();
        int int38 = strComparableQueue1.size();
        boolean boolean39 = strComparableQueue1.isFull();
        java.lang.Class<?> wildcardClass40 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        int int52 = strComparableQueue1.size();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator12 = strComparableQueue9.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue14.poll();
        boolean boolean16 = strComparableQueue14.isAtFullCapacity();
        java.lang.Object[] objArray17 = strComparableQueue14.toArray();
        int int18 = strComparableQueue14.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream31 = strComparableQueue30.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableQueue33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        java.util.stream.Stream[] streamArray43 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray44 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray43;
        strComparableStreamArray44[0] = strComparableStream28;
        strComparableStreamArray44[1] = strComparableStream31;
        strComparableStreamArray44[2] = strComparableStream34;
        strComparableStreamArray44[3] = strComparableStream41;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray53 = strComparableQueue20.toArray(strComparableStreamArray44);
        boolean boolean54 = strComparableQueue20.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList58 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean59 = strComparableList58.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean60 = strComparableQueue56.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList58);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream61 = strComparableList58.stream();
        boolean boolean62 = strComparableQueue20.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList58);
        boolean boolean63 = strComparableQueue14.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue20);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue14.iterator();
        boolean boolean65 = strComparableQueue9.contains((java.lang.Object) strComparableQueue14);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator12);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertNotNull(strComparableStream31);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertNotNull(streamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray44);
        org.junit.Assert.assertNotNull(strComparableStreamArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strComparableStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        java.lang.String str23 = strComparableQueue1.toString();
        java.lang.Object[] objArray24 = strComparableQueue1.toArray();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertNotNull(objArray24);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue15.spliterator();
        boolean boolean18 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean19 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        boolean boolean25 = strComparableQueue22.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean26 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator27 = strComparableQueue22.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator27);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        boolean boolean7 = strComparableQueue5.isEmpty();
        boolean boolean8 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        boolean boolean10 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        int int16 = strComparableQueue12.maxSize();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue12.peek();
        boolean boolean18 = strComparableQueue1.remove((java.lang.Object) strComparable17);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableQueue1.spliterator();
        boolean boolean20 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        int int4 = strComparableQueue1.maxSize();
        boolean boolean6 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream16 = strComparableList13.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream19 = strComparableQueue18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableQueue21.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        java.util.stream.Stream[] streamArray31 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray32 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray31;
        strComparableStreamArray32[0] = strComparableStream16;
        strComparableStreamArray32[1] = strComparableStream19;
        strComparableStreamArray32[2] = strComparableStream22;
        strComparableStreamArray32[3] = strComparableStream29;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray41 = strComparableQueue8.toArray(strComparableStreamArray32);
        boolean boolean43 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableQueue8.remove();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableQueue46.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream57 = strComparableQueue56.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue62 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList64 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean65 = strComparableList64.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean66 = strComparableQueue62.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList64);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream67 = strComparableList64.stream();
        java.util.stream.Stream[] streamArray69 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray70 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray69;
        strComparableStreamArray70[0] = strComparableStream54;
        strComparableStreamArray70[1] = strComparableStream57;
        strComparableStreamArray70[2] = strComparableStream60;
        strComparableStreamArray70[3] = strComparableStream67;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray79 = strComparableQueue46.toArray(strComparableStreamArray70);
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue81 = new Tester.CircularFifoQueue<java.lang.reflect.Type>((int) (short) 10);
        boolean boolean82 = strComparableQueue46.remove((java.lang.Object) typeQueue81);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream83 = strComparableQueue46.stream();
        boolean boolean84 = strComparableQueue8.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        boolean boolean85 = strComparableQueue1.contains((java.lang.Object) strComparableQueue8);
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strComparableStream16);
        org.junit.Assert.assertNotNull(strComparableStream19);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertNotNull(streamArray31);
        org.junit.Assert.assertNotNull(strComparableStreamArray32);
        org.junit.Assert.assertNotNull(strComparableStreamArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + strComparable44 + "' != '" + "[]" + "'", strComparable44.equals("[]"));
        org.junit.Assert.assertNull(strComparable47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(strComparableStream57);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strComparableStream67);
        org.junit.Assert.assertNotNull(streamArray69);
        org.junit.Assert.assertNotNull(strComparableStreamArray70);
        org.junit.Assert.assertNotNull(strComparableStreamArray79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strComparableStream83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue9.toString();
        int int16 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        boolean boolean28 = strComparableQueue25.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        boolean boolean30 = strComparableQueue9.remove((java.lang.Object) strComparableQueue18);
        boolean boolean32 = strComparableQueue18.offer((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray26 = strComparableQueue25.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableQueue25.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.poll();
        boolean boolean32 = strComparableQueue29.offer((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        strComparableQueue36.clear();
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue36.poll();
        java.lang.String str43 = strComparableQueue36.toString();
        Tester.BoundedCollection[] boundedCollectionArray45 = new Tester.BoundedCollection[6];
        @SuppressWarnings("unchecked") Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray46 = (Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[]) boundedCollectionArray45;
        strComparableCollectionArray46[0] = strComparableQueue10;
        strComparableCollectionArray46[1] = strComparableQueue18;
        strComparableCollectionArray46[2] = strComparableQueue25;
        strComparableCollectionArray46[3] = strComparableQueue29;
        strComparableCollectionArray46[4] = strComparableQueue34;
        strComparableCollectionArray46[5] = strComparableQueue36;
        Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray59 = strComparableQueue4.toArray(strComparableCollectionArray46);
        boolean boolean61 = strComparableQueue4.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]" + "'", str43.equals("[]"));
        org.junit.Assert.assertNotNull(boundedCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray46);
        org.junit.Assert.assertNotNull(strComparableCollectionArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue8.peek();
        boolean boolean19 = strComparableQueue8.add((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        boolean boolean24 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Object obj25 = null;
        boolean boolean26 = strComparableQueue1.remove(obj25);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        int int23 = strComparableQueue1.size();
        strComparableQueue1.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream16 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strComparableStream16);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        Tester.CircularFifoQueue<java.util.Collection<java.lang.Comparable<java.lang.String>>> strComparableCollectionQueue0 = new Tester.CircularFifoQueue<java.util.Collection<java.lang.Comparable<java.lang.String>>>();
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.Object obj12 = null;
        boolean boolean13 = strComparableQueue4.remove(obj12);
        try {
            java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue4.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int5 = strComparableQueue1.size();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue9.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue9.peek();
        java.lang.Object[] objArray14 = strComparableQueue9.toArray();
        boolean boolean15 = strComparableQueue9.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue17.poll();
        boolean boolean19 = strComparableQueue17.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        java.lang.String str23 = strComparableQueue21.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor24 = strComparableQueue21.iterator();
        boolean boolean25 = strComparableQueue21.isEmpty();
        boolean boolean27 = strComparableQueue21.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean28 = strComparableQueue17.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue21);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        boolean boolean38 = strComparableQueue36.isAtFullCapacity();
        java.lang.Object[] objArray39 = strComparableQueue36.toArray();
        boolean boolean40 = strComparableQueue30.contains((java.lang.Object) objArray39);
        boolean boolean41 = strComparableQueue21.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        boolean boolean42 = strComparableQueue21.isEmpty();
        boolean boolean44 = strComparableQueue21.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue21.remove();
        boolean boolean46 = strComparableQueue9.contains((java.lang.Object) strComparableQueue21);
        boolean boolean47 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(strComparable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + strComparable45 + "' != '" + "[]" + "'", strComparable45.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        strComparableQueue1.clear();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream53 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertNotNull(strComparableStream53);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        int int4 = strComparableQueue1.size();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream5 = strComparableQueue1.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray14 = strComparableQueue13.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream21 = strComparableList18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableList31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList45 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean46 = strComparableList45.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean47 = strComparableQueue43.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList45);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream48 = strComparableList45.stream();
        java.util.AbstractCollection[] abstractCollectionArray50 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray51 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray50;
        strComparableCollectionArray51[0] = strComparableList18;
        strComparableCollectionArray51[1] = strComparableList25;
        strComparableCollectionArray51[2] = strComparableList31;
        strComparableCollectionArray51[3] = strComparableList38;
        strComparableCollectionArray51[4] = strComparableList45;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray62 = strComparableQueue13.toArray(strComparableCollectionArray51);
        boolean boolean63 = strComparableQueue7.contains((java.lang.Object) strComparableCollectionArray62);
        int int64 = strComparableQueue7.maxSize();
        strComparableQueue7.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue67 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable68 = strComparableQueue67.poll();
        java.lang.String str69 = strComparableQueue67.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor70 = strComparableQueue67.iterator();
        boolean boolean71 = strComparableQueue67.isEmpty();
        java.lang.Object[] objArray72 = strComparableQueue67.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue74 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean75 = strComparableQueue67.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue74);
        java.lang.String str76 = strComparableQueue67.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue78 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableQueue78.poll();
        boolean boolean81 = strComparableQueue78.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable82 = strComparableQueue78.remove();
        boolean boolean83 = strComparableQueue67.contains((java.lang.Object) strComparableQueue78);
        boolean boolean84 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue78);
        int int85 = strComparableQueue78.maxSize();
        strComparableQueue78.clear();
        boolean boolean87 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue78);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strComparableStream5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strComparableStream21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableStream48);
        org.junit.Assert.assertNotNull(abstractCollectionArray50);
        org.junit.Assert.assertNotNull(strComparableCollectionArray51);
        org.junit.Assert.assertNotNull(strComparableCollectionArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(strComparable68);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "[]" + "'", str69.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[]" + "'", str76.equals("[]"));
        org.junit.Assert.assertNull(strComparable79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + strComparable82 + "' != '" + "" + "'", strComparable82.equals(""));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableQueue8.stream();
        try {
            java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue8.get(5);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (5) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean26 = strComparableQueue5.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue5.peek();
        boolean boolean29 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + strComparable27 + "' != '" + "hi!" + "'", strComparable27.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue0 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        java.lang.Comparable<java.lang.String> strComparable1 = strComparableQueue0.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue0.iterator();
        org.junit.Assert.assertNull(strComparable1);
        org.junit.Assert.assertNotNull(strComparableItor2);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        boolean boolean69 = strComparableQueue65.isEmpty();
        java.lang.Object[] objArray70 = strComparableQueue65.toArray();
        boolean boolean71 = strComparableQueue59.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue65);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue73 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str74 = strComparableQueue73.toString();
        java.lang.String str75 = strComparableQueue73.toString();
        boolean boolean76 = strComparableQueue59.remove((java.lang.Object) strComparableQueue73);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream77 = strComparableQueue73.stream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[]" + "'", str74.equals("[]"));
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "[]" + "'", str75.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strComparableStream77);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        boolean boolean14 = strComparableQueue8.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue15.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strComparableItor16);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean37 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue1.remove();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + strComparable38 + "' != '" + "[]" + "'", strComparable38.equals("[]"));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        strComparableQueue10.clear();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        java.lang.String str20 = strComparableQueue18.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue10.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean31 = strComparableQueue10.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean32 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean34 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object[] objArray35 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        strComparableQueue37.clear();
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue37.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue45.poll();
        boolean boolean47 = strComparableQueue45.isAtFullCapacity();
        java.lang.Object[] objArray48 = strComparableQueue45.toArray();
        strComparableQueue45.clear();
        boolean boolean50 = strComparableQueue37.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue45);
        java.lang.String str51 = strComparableQueue37.toString();
        java.lang.Class<?> wildcardClass52 = strComparableQueue37.getClass();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream53 = strComparableQueue37.stream();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableQueue37.stream();
        boolean boolean55 = strComparableQueue1.remove((java.lang.Object) strComparableStream54);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]" + "'", str20.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]" + "'", str51.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(strComparableStream53);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        boolean boolean15 = strComparableQueue12.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue12.remove();
        boolean boolean17 = strComparableQueue1.contains((java.lang.Object) strComparableQueue12);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue12.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + strComparable16 + "' != '" + "" + "'", strComparable16.equals(""));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strComparableItor18);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Class<?> wildcardClass35 = strComparableQueue13.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableQueue40.poll();
        boolean boolean42 = strComparableQueue40.isAtFullCapacity();
        boolean boolean43 = strComparableQueue37.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue40);
        boolean boolean45 = strComparableQueue40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue40.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableQueue40.element();
        boolean boolean48 = strComparableQueue13.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue40);
        strComparableQueue40.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertNull(strComparable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + strComparable47 + "' != '" + "hi!" + "'", strComparable47.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 1);
        boolean boolean3 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        int int16 = strComparableQueue12.maxSize();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue12.peek();
        boolean boolean18 = strComparableQueue1.remove((java.lang.Object) strComparable17);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator19 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        boolean boolean23 = strComparableQueue21.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator27 = strComparableQueue25.spliterator();
        boolean boolean28 = strComparableQueue21.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        java.lang.String str32 = strComparableQueue30.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableQueue30.iterator();
        boolean boolean34 = strComparableQueue30.isEmpty();
        java.lang.Object[] objArray35 = strComparableQueue30.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray38 = strComparableQueue37.toArray();
        int int39 = strComparableQueue37.size();
        boolean boolean40 = strComparableQueue30.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue37);
        boolean boolean41 = strComparableQueue21.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        boolean boolean43 = strComparableQueue30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean44 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        int int45 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator19);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertNotNull(strComparableSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]" + "'", str32.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.Class<?> wildcardClass44 = strComparableQueue1.getClass();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor45 = strComparableQueue1.iterator();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableQueue51.poll();
        boolean boolean53 = strComparableQueue51.isAtFullCapacity();
        boolean boolean54 = strComparableQueue48.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        boolean boolean56 = strComparableQueue51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue51.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableQueue59.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue62 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList64 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean65 = strComparableList64.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean66 = strComparableQueue62.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList64);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream67 = strComparableList64.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue69 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream70 = strComparableQueue69.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream73 = strComparableQueue72.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList77 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean78 = strComparableList77.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean79 = strComparableQueue75.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList77);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream80 = strComparableList77.stream();
        java.util.stream.Stream[] streamArray82 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray83 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray82;
        strComparableStreamArray83[0] = strComparableStream67;
        strComparableStreamArray83[1] = strComparableStream70;
        strComparableStreamArray83[2] = strComparableStream73;
        strComparableStreamArray83[3] = strComparableStream80;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray92 = strComparableQueue59.toArray(strComparableStreamArray83);
        boolean boolean93 = strComparableQueue59.isEmpty();
        boolean boolean94 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        boolean boolean95 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue51);
        java.lang.Comparable<java.lang.String> strComparable96 = strComparableQueue51.peek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strComparableItor45);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertNull(strComparable52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strComparable60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strComparableStream67);
        org.junit.Assert.assertNotNull(strComparableStream70);
        org.junit.Assert.assertNotNull(strComparableStream73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strComparableStream80);
        org.junit.Assert.assertNotNull(streamArray82);
        org.junit.Assert.assertNotNull(strComparableStreamArray83);
        org.junit.Assert.assertNotNull(strComparableStreamArray92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + strComparable96 + "' != '" + "hi!" + "'", strComparable96.equals("hi!"));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        boolean boolean18 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str19 = strComparableQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]" + "'", str19.equals("[]"));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue0 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        java.lang.Comparable<java.lang.String> strComparable1 = strComparableQueue0.poll();
        int int2 = strComparableQueue0.maxSize();
        int int3 = strComparableQueue0.size();
        org.junit.Assert.assertNull(strComparable1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean44 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean45 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue47 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str48 = strComparableQueue47.toString();
        boolean boolean49 = strComparableQueue47.isFull();
        boolean boolean50 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue47);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor51 = strComparableQueue8.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]" + "'", str48.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strComparableItor51);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Class<?> wildcardClass31 = strComparableQueue27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] { wildcardClass31 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = strComparableQueue1.toArray(genericDeclarationArray32);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        java.lang.String str38 = strComparableQueue36.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor39 = strComparableQueue36.iterator();
        boolean boolean40 = strComparableQueue36.isEmpty();
        java.lang.Object[] objArray41 = strComparableQueue36.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean44 = strComparableQueue36.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue43);
        boolean boolean46 = strComparableQueue43.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator50 = strComparableQueue48.spliterator();
        java.lang.String str51 = strComparableQueue48.toString();
        boolean boolean52 = strComparableQueue43.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue48);
        boolean boolean53 = strComparableQueue1.remove((java.lang.Object) strComparableQueue43);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]" + "'", str38.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertNotNull(strComparableSpliterator50);
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[]" + "'", str51.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue1.maxSize();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream14 = strComparableQueue1.parallelStream();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue1.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strComparableStream14);
        org.junit.Assert.assertNotNull(strComparableItor15);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue15.spliterator();
        boolean boolean18 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean19 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        boolean boolean25 = strComparableQueue22.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean26 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue22.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.poll();
        java.lang.String str31 = strComparableQueue29.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor32 = strComparableQueue29.iterator();
        boolean boolean33 = strComparableQueue29.isEmpty();
        boolean boolean35 = strComparableQueue29.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue41.poll();
        java.lang.String str43 = strComparableQueue41.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor44 = strComparableQueue41.iterator();
        boolean boolean45 = strComparableQueue41.isEmpty();
        boolean boolean47 = strComparableQueue41.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean48 = strComparableQueue37.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue41);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue50 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList52 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean53 = strComparableList52.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean54 = strComparableQueue50.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList52);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableQueue56.poll();
        boolean boolean58 = strComparableQueue56.isAtFullCapacity();
        java.lang.Object[] objArray59 = strComparableQueue56.toArray();
        boolean boolean60 = strComparableQueue50.contains((java.lang.Object) objArray59);
        boolean boolean61 = strComparableQueue41.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue50);
        boolean boolean62 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue41);
        java.lang.Class<?> wildcardClass63 = strComparableQueue41.getClass();
        boolean boolean64 = strComparableQueue22.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue41);
        strComparableQueue41.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + strComparable27 + "' != '" + "" + "'", strComparable27.equals(""));
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[]" + "'", str31.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]" + "'", str43.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(strComparable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean14 = strComparableQueue8.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue16.poll();
        java.lang.String str18 = strComparableQueue16.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor19 = strComparableQueue16.iterator();
        boolean boolean20 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue16);
        int int21 = strComparableQueue16.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]" + "'", str18.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        int int5 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        boolean boolean17 = strComparableQueue15.isAtFullCapacity();
        java.lang.Object[] objArray18 = strComparableQueue15.toArray();
        strComparableQueue15.clear();
        boolean boolean20 = strComparableQueue7.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue15.peek();
        boolean boolean23 = strComparableQueue15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean24 = strComparableQueue1.contains((java.lang.Object) strComparableQueue15);
        strComparableQueue15.clear();
        boolean boolean27 = strComparableQueue15.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        Tester.CircularFifoQueue<java.util.List<java.lang.Comparable<java.lang.String>>> strComparableListQueue1 = new Tester.CircularFifoQueue<java.util.List<java.lang.Comparable<java.lang.String>>>((int) '#');
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator16 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue18.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream25 = strComparableQueue18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        boolean boolean32 = strComparableQueue30.isAtFullCapacity();
        boolean boolean33 = strComparableQueue27.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue30.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableQueue36.iterator();
        boolean boolean38 = strComparableQueue30.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue36);
        boolean boolean39 = strComparableQueue18.contains((java.lang.Object) boolean38);
        boolean boolean40 = strComparableQueue18.isAtFullCapacity();
        boolean boolean41 = strComparableQueue1.contains((java.lang.Object) boolean40);
        java.lang.String str42 = strComparableQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNotNull(strComparableStream25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertNotNull(strComparableItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]" + "'", str42.equals("[]"));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue1.remove();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableQueue49.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream53 = strComparableQueue52.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList57 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean58 = strComparableList57.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean59 = strComparableQueue55.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList57);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableList57.stream();
        java.util.stream.Stream[] streamArray62 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray63 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray62;
        strComparableStreamArray63[0] = strComparableStream47;
        strComparableStreamArray63[1] = strComparableStream50;
        strComparableStreamArray63[2] = strComparableStream53;
        strComparableStreamArray63[3] = strComparableStream60;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray72 = strComparableQueue39.toArray(strComparableStreamArray63);
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue74 = new Tester.CircularFifoQueue<java.lang.reflect.Type>((int) (short) 10);
        boolean boolean75 = strComparableQueue39.remove((java.lang.Object) typeQueue74);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream76 = strComparableQueue39.stream();
        boolean boolean77 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        java.lang.Object[] objArray78 = strComparableQueue39.toArray();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + strComparable37 + "' != '" + "[]" + "'", strComparable37.equals("[]"));
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(strComparableStream53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNotNull(streamArray62);
        org.junit.Assert.assertNotNull(strComparableStreamArray63);
        org.junit.Assert.assertNotNull(strComparableStreamArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strComparableStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        boolean boolean7 = strComparableQueue5.isEmpty();
        boolean boolean8 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        int int14 = strComparableQueue10.maxSize();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue10.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        java.lang.String str21 = strComparableQueue19.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor22 = strComparableQueue19.iterator();
        boolean boolean23 = strComparableQueue19.isEmpty();
        boolean boolean25 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        java.lang.String str33 = strComparableQueue31.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor34 = strComparableQueue31.iterator();
        boolean boolean35 = strComparableQueue31.isEmpty();
        boolean boolean37 = strComparableQueue31.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean38 = strComparableQueue27.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList42 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean43 = strComparableList42.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean44 = strComparableQueue40.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList42);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableQueue46.poll();
        boolean boolean48 = strComparableQueue46.isAtFullCapacity();
        java.lang.Object[] objArray49 = strComparableQueue46.toArray();
        boolean boolean50 = strComparableQueue40.contains((java.lang.Object) objArray49);
        boolean boolean51 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue40);
        boolean boolean52 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean53 = strComparableQueue17.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean54 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue17);
        boolean boolean55 = strComparableQueue5.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue57 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable58 = strComparableQueue57.poll();
        java.lang.String str59 = strComparableQueue57.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor60 = strComparableQueue57.iterator();
        boolean boolean61 = strComparableQueue57.isEmpty();
        java.lang.Object[] objArray62 = strComparableQueue57.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableQueue64.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue67 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable68 = strComparableQueue67.poll();
        boolean boolean69 = strComparableQueue67.isAtFullCapacity();
        boolean boolean70 = strComparableQueue64.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue67);
        boolean boolean71 = strComparableQueue57.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue64);
        boolean boolean72 = strComparableQueue64.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream73 = strComparableQueue64.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue75.poll();
        boolean boolean77 = strComparableQueue64.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue79 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean80 = strComparableQueue79.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable81 = strComparableQueue79.remove();
        boolean boolean82 = strComparableQueue75.contains((java.lang.Object) strComparable81);
        boolean boolean83 = strComparableQueue5.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]" + "'", str21.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]" + "'", str33.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(strComparable47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(strComparable58);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[]" + "'", str59.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNull(strComparable65);
        org.junit.Assert.assertNull(strComparable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strComparableStream73);
        org.junit.Assert.assertNull(strComparable76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + strComparable81 + "' != '" + "" + "'", strComparable81.equals(""));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Class<?> wildcardClass22 = strComparableQueue19.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        boolean boolean37 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        boolean boolean38 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean39 = strComparableQueue31.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableQueue31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean45 = strComparableQueue19.contains((java.lang.Object) boolean44);
        boolean boolean47 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        java.lang.Class<?> wildcardClass48 = strComparableQueue19.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        boolean boolean69 = strComparableQueue65.isEmpty();
        java.lang.Object[] objArray70 = strComparableQueue65.toArray();
        boolean boolean71 = strComparableQueue59.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue65);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue73 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str74 = strComparableQueue73.toString();
        java.lang.String str75 = strComparableQueue73.toString();
        boolean boolean76 = strComparableQueue59.remove((java.lang.Object) strComparableQueue73);
        boolean boolean77 = strComparableQueue73.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "[]" + "'", str74.equals("[]"));
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "[]" + "'", str75.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator15 = strComparableQueue13.spliterator();
        java.lang.String str16 = strComparableQueue13.toString();
        boolean boolean17 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        int int18 = strComparableQueue8.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(strComparableSpliterator15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        boolean boolean15 = strComparableQueue13.isAtFullCapacity();
        boolean boolean16 = strComparableQueue10.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue13.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor20 = strComparableQueue19.iterator();
        boolean boolean21 = strComparableQueue13.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean22 = strComparableQueue1.contains((java.lang.Object) boolean21);
        int int23 = strComparableQueue1.size();
        java.lang.Class<?> wildcardClass24 = strComparableQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertNotNull(strComparableItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue3.poll();
        boolean boolean5 = strComparableQueue3.isAtFullCapacity();
        java.lang.Object[] objArray6 = strComparableQueue3.toArray();
        strComparableQueue3.clear();
        int int8 = strComparableQueue3.size();
        boolean boolean9 = strComparableQueue1.remove((java.lang.Object) strComparableQueue3);
        int int10 = strComparableQueue3.maxSize();
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        java.lang.String str67 = strComparableQueue65.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor68 = strComparableQueue65.iterator();
        boolean boolean69 = strComparableQueue65.isEmpty();
        java.lang.Object[] objArray70 = strComparableQueue65.toArray();
        boolean boolean71 = strComparableQueue59.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue65);
        java.lang.String str72 = strComparableQueue59.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[]" + "'", str72.equals("[]"));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.peek();
        int int5 = strComparableQueue1.size();
        boolean boolean6 = strComparableQueue1.isFull();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableQueue19.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        Tester.CircularFifoQueue<java.util.RandomAccess> randomAccessQueue0 = new Tester.CircularFifoQueue<java.util.RandomAccess>();
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue1.parallelStream();
        boolean boolean7 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        int int9 = strComparableQueue1.maxSize();
        java.lang.String str10 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream13 = strComparableQueue12.stream();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue12.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue12.peek();
        java.lang.Object[] objArray17 = strComparableQueue12.toArray();
        boolean boolean18 = strComparableQueue12.isEmpty();
        boolean boolean19 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableStream13);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        int int16 = strComparableQueue12.maxSize();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue12.peek();
        boolean boolean18 = strComparableQueue1.remove((java.lang.Object) strComparable17);
        java.lang.Object obj19 = null;
        boolean boolean20 = strComparableQueue1.remove(obj19);
        try {
            java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        boolean boolean13 = strComparableQueue10.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        java.lang.String str23 = strComparableQueue21.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor24 = strComparableQueue21.iterator();
        boolean boolean25 = strComparableQueue21.isEmpty();
        java.lang.Object[] objArray26 = strComparableQueue21.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean29 = strComparableQueue21.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue28);
        boolean boolean30 = strComparableQueue15.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue28);
        boolean boolean31 = strComparableQueue10.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue28);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor32 = strComparableQueue10.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableItor32);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean37 = strComparableQueue1.isEmpty();
        strComparableQueue1.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue4.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableList17.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue22.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream26 = strComparableQueue25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList30 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean31 = strComparableList30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean32 = strComparableQueue28.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList30);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableList30.stream();
        java.util.stream.Stream[] streamArray35 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray36 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray35;
        strComparableStreamArray36[0] = strComparableStream20;
        strComparableStreamArray36[1] = strComparableStream23;
        strComparableStreamArray36[2] = strComparableStream26;
        strComparableStreamArray36[3] = strComparableStream33;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray45 = strComparableQueue12.toArray(strComparableStreamArray36);
        boolean boolean46 = strComparableQueue12.isEmpty();
        boolean boolean47 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableQueue49.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue52.poll();
        boolean boolean54 = strComparableQueue52.isAtFullCapacity();
        boolean boolean55 = strComparableQueue49.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue52);
        java.lang.Class<?> wildcardClass56 = strComparableQueue52.getClass();
        boolean boolean58 = strComparableQueue52.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean59 = strComparableQueue52.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue52.stream();
        boolean boolean61 = strComparableQueue4.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue52);
        boolean boolean62 = strComparableQueue52.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(strComparableStream26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertNotNull(streamArray35);
        org.junit.Assert.assertNotNull(strComparableStreamArray36);
        org.junit.Assert.assertNotNull(strComparableStreamArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strComparable50);
        org.junit.Assert.assertNull(strComparable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        boolean boolean14 = strComparableQueue8.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        strComparableQueue16.clear();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue16.poll();
        java.lang.String str23 = strComparableQueue16.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        strComparableQueue25.clear();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue25.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        java.lang.String str35 = strComparableQueue33.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor36 = strComparableQueue33.iterator();
        boolean boolean37 = strComparableQueue25.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue42.isAtFullCapacity();
        boolean boolean45 = strComparableQueue39.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean46 = strComparableQueue25.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean47 = strComparableQueue16.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        java.lang.Object[] objArray48 = strComparableQueue42.toArray();
        boolean boolean49 = strComparableQueue8.remove((java.lang.Object) strComparableQueue42);
        java.lang.Class<?> wildcardClass50 = strComparableQueue42.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[]" + "'", str35.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator6 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strComparableSpliterator6);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        boolean boolean17 = strComparableQueue15.isAtFullCapacity();
        java.lang.Object[] objArray18 = strComparableQueue15.toArray();
        strComparableQueue15.clear();
        boolean boolean20 = strComparableQueue7.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.lang.String str21 = strComparableQueue15.toString();
        int int22 = strComparableQueue15.maxSize();
        boolean boolean23 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        int int24 = strComparableQueue1.size();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue1.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]" + "'", str21.equals("[]"));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(strComparable25);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.peek();
        strComparableQueue1.clear();
        boolean boolean9 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable10 = null;
        try {
            boolean boolean11 = strComparableQueue1.offer(strComparable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean54 = strComparableQueue9.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.parallelStream();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue15.spliterator();
        boolean boolean18 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        java.lang.String str22 = strComparableQueue20.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor23 = strComparableQueue20.iterator();
        boolean boolean24 = strComparableQueue20.isEmpty();
        java.lang.Object[] objArray25 = strComparableQueue20.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray28 = strComparableQueue27.toArray();
        int int29 = strComparableQueue27.size();
        boolean boolean30 = strComparableQueue20.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean31 = strComparableQueue11.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue20);
        boolean boolean32 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue20);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[]" + "'", str22.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
        java.lang.String str60 = strComparableQueue1.toString();
        boolean boolean62 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[[hi!]]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "[hi!]" + "'", str60.equals("[hi!]"));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass11 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue5.spliterator();
        boolean boolean8 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream11 = strComparableQueue10.stream();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue10.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue10.peek();
        java.lang.Object[] objArray15 = strComparableQueue10.toArray();
        boolean boolean16 = strComparableQueue1.remove((java.lang.Object) objArray15);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strComparableStream11);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue3.stream();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue3.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        int int13 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        strComparableQueue15.clear();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.lang.String str25 = strComparableQueue23.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor26 = strComparableQueue23.iterator();
        boolean boolean27 = strComparableQueue15.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableQueue23.parallelStream();
        boolean boolean29 = strComparableQueue9.contains((java.lang.Object) strComparableStream28);
        boolean boolean30 = strComparableQueue9.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableQueue32.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue35.poll();
        java.lang.String str37 = strComparableQueue35.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor38 = strComparableQueue35.iterator();
        boolean boolean39 = strComparableQueue35.isEmpty();
        boolean boolean41 = strComparableQueue35.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue45.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        boolean boolean50 = strComparableQueue48.isAtFullCapacity();
        boolean boolean51 = strComparableQueue45.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue48);
        Tester.CircularFifoQueue[] circularFifoQueueArray53 = new Tester.CircularFifoQueue[5];
        @SuppressWarnings("unchecked") Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[] strComparableQueueArray54 = (Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[]) circularFifoQueueArray53;
        strComparableQueueArray54[0] = strComparableQueue9;
        strComparableQueueArray54[1] = strComparableQueue32;
        strComparableQueueArray54[2] = strComparableQueue35;
        strComparableQueueArray54[3] = strComparableQueue43;
        strComparableQueueArray54[4] = strComparableQueue45;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[] strComparableQueueArray65 = strComparableQueue3.toArray(strComparableQueueArray54);
        try {
            java.lang.Comparable<java.lang.String> strComparable67 = strComparableQueue3.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]" + "'", str25.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strComparable33);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]" + "'", str37.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(circularFifoQueueArray53);
        org.junit.Assert.assertNotNull(strComparableQueueArray54);
        org.junit.Assert.assertNotNull(strComparableQueueArray65);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue1.maxSize();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream14 = strComparableQueue1.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        strComparableQueue16.clear();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue16.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        boolean boolean26 = strComparableQueue24.isAtFullCapacity();
        java.lang.Object[] objArray27 = strComparableQueue24.toArray();
        strComparableQueue24.clear();
        boolean boolean29 = strComparableQueue16.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue24);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue24.peek();
        boolean boolean32 = strComparableQueue24.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor33 = strComparableQueue24.iterator();
        boolean boolean34 = strComparableQueue1.contains((java.lang.Object) strComparableQueue24);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strComparableStream14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Class<?> wildcardClass8 = strComparableQueue4.getClass();
        boolean boolean10 = strComparableQueue4.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean11 = strComparableQueue4.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        java.lang.Object[] objArray18 = strComparableQueue13.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean21 = strComparableQueue13.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue20);
        boolean boolean23 = strComparableQueue20.remove((java.lang.Object) 10L);
        boolean boolean24 = strComparableQueue4.contains((java.lang.Object) 10L);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue4.element();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + strComparable25 + "' != '" + "" + "'", strComparable25.equals(""));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator52 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator52);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator15 = strComparableQueue13.spliterator();
        java.lang.String str16 = strComparableQueue13.toString();
        boolean boolean17 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue19.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.lang.String str25 = strComparableQueue23.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor26 = strComparableQueue23.iterator();
        boolean boolean27 = strComparableQueue23.isEmpty();
        boolean boolean29 = strComparableQueue23.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean30 = strComparableQueue19.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList34 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean35 = strComparableList34.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean36 = strComparableQueue32.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList34);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue38.poll();
        boolean boolean40 = strComparableQueue38.isAtFullCapacity();
        java.lang.Object[] objArray41 = strComparableQueue38.toArray();
        boolean boolean42 = strComparableQueue32.contains((java.lang.Object) objArray41);
        boolean boolean43 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator44 = strComparableQueue32.spliterator();
        boolean boolean45 = strComparableQueue13.contains((java.lang.Object) strComparableQueue32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream46 = strComparableQueue32.stream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNotNull(strComparableSpliterator15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]" + "'", str25.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(strComparable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableStream46);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        boolean boolean21 = strComparableQueue15.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean22 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "[]", "hi!", "[]", "" };
        java.lang.CharSequence[] charSequenceArray28 = strComparableQueue18.toArray(charSequenceArray27);
        boolean boolean30 = strComparableQueue18.add((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.parallelStream();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean12 = strComparableQueue11.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue11.remove();
        boolean boolean15 = strComparableQueue11.offer((java.lang.Comparable<java.lang.String>) "[]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray24 = strComparableQueue23.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList28 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean29 = strComparableList28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean30 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList28);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream31 = strComparableList28.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList35 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean36 = strComparableList35.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean37 = strComparableQueue33.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList35);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList41 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean42 = strComparableList41.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean43 = strComparableQueue39.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList41);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream44 = strComparableList41.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList48 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean49 = strComparableList48.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean50 = strComparableQueue46.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList48);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream51 = strComparableList48.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream58 = strComparableList55.stream();
        java.util.AbstractCollection[] abstractCollectionArray60 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray61 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray60;
        strComparableCollectionArray61[0] = strComparableList28;
        strComparableCollectionArray61[1] = strComparableList35;
        strComparableCollectionArray61[2] = strComparableList41;
        strComparableCollectionArray61[3] = strComparableList48;
        strComparableCollectionArray61[4] = strComparableList55;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray72 = strComparableQueue23.toArray(strComparableCollectionArray61);
        boolean boolean73 = strComparableQueue17.contains((java.lang.Object) strComparableCollectionArray72);
        int int74 = strComparableQueue17.maxSize();
        strComparableQueue17.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue77 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableQueue77.poll();
        java.lang.String str79 = strComparableQueue77.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor80 = strComparableQueue77.iterator();
        boolean boolean81 = strComparableQueue77.isEmpty();
        java.lang.Object[] objArray82 = strComparableQueue77.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue84 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean85 = strComparableQueue77.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue84);
        java.lang.String str86 = strComparableQueue77.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue88 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable89 = strComparableQueue88.poll();
        boolean boolean91 = strComparableQueue88.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable92 = strComparableQueue88.remove();
        boolean boolean93 = strComparableQueue77.contains((java.lang.Object) strComparableQueue88);
        boolean boolean94 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue88);
        boolean boolean95 = strComparableQueue11.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue17);
        boolean boolean96 = strComparableQueue1.contains((java.lang.Object) strComparableQueue11);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + strComparable13 + "' != '" + "" + "'", strComparable13.equals(""));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strComparableStream31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparableStream44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strComparableStream51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strComparableStream58);
        org.junit.Assert.assertNotNull(abstractCollectionArray60);
        org.junit.Assert.assertNotNull(strComparableCollectionArray61);
        org.junit.Assert.assertNotNull(strComparableCollectionArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNull(strComparable78);
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "[]" + "'", str79.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + str86 + "' != '" + "[]" + "'", str86.equals("[]"));
        org.junit.Assert.assertNull(strComparable89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + strComparable92 + "' != '" + "" + "'", strComparable92.equals(""));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        boolean boolean41 = strComparableQueue39.isAtFullCapacity();
        boolean boolean42 = strComparableQueue36.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        boolean boolean44 = strComparableQueue39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean45 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList53 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean54 = strComparableList53.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean55 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList53);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream56 = strComparableList53.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue58 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream59 = strComparableQueue58.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream62 = strComparableQueue61.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList66 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean67 = strComparableList66.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean68 = strComparableQueue64.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList66);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream69 = strComparableList66.stream();
        java.util.stream.Stream[] streamArray71 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray72 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray71;
        strComparableStreamArray72[0] = strComparableStream56;
        strComparableStreamArray72[1] = strComparableStream59;
        strComparableStreamArray72[2] = strComparableStream62;
        strComparableStreamArray72[3] = strComparableStream69;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray81 = strComparableQueue48.toArray(strComparableStreamArray72);
        boolean boolean82 = strComparableQueue48.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue84 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList86 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean87 = strComparableList86.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean88 = strComparableQueue84.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream89 = strComparableList86.stream();
        boolean boolean90 = strComparableQueue48.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        boolean boolean91 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        java.lang.Class<?> wildcardClass92 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparableStream56);
        org.junit.Assert.assertNotNull(strComparableStream59);
        org.junit.Assert.assertNotNull(strComparableStream62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparableStream69);
        org.junit.Assert.assertNotNull(streamArray71);
        org.junit.Assert.assertNotNull(strComparableStreamArray72);
        org.junit.Assert.assertNotNull(strComparableStreamArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strComparableStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Class<?> wildcardClass22 = strComparableQueue19.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        boolean boolean37 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        boolean boolean38 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean39 = strComparableQueue31.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableQueue31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean45 = strComparableQueue19.contains((java.lang.Object) boolean44);
        boolean boolean47 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        strComparableQueue49.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableQueue56.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableQueue59.poll();
        java.lang.String str61 = strComparableQueue59.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor62 = strComparableQueue59.iterator();
        java.util.Iterator[] iteratorArray64 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray65 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray64;
        strComparableItorArray65[0] = strComparableItor57;
        strComparableItorArray65[1] = strComparableItor62;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray70 = strComparableQueue49.toArray(strComparableItorArray65);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue75.poll();
        boolean boolean77 = strComparableQueue75.isAtFullCapacity();
        boolean boolean78 = strComparableQueue72.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        java.lang.Class<?> wildcardClass79 = strComparableQueue75.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray80 = new java.lang.reflect.GenericDeclaration[] { wildcardClass79 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray81 = strComparableQueue49.toArray(genericDeclarationArray80);
        java.lang.Class<?> wildcardClass82 = genericDeclarationArray81.getClass();
        boolean boolean83 = strComparableQueue19.contains((java.lang.Object) wildcardClass82);
        boolean boolean84 = strComparableQueue19.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertNull(strComparable60);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]" + "'", str61.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor62);
        org.junit.Assert.assertNotNull(iteratorArray64);
        org.junit.Assert.assertNotNull(strComparableItorArray65);
        org.junit.Assert.assertNotNull(strComparableItorArray70);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNull(strComparable76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(genericDeclarationArray80);
        org.junit.Assert.assertNotNull(genericDeclarationArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        java.lang.String str63 = strComparableQueue61.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue61.iterator();
        boolean boolean65 = strComparableQueue61.isEmpty();
        java.lang.Object[] objArray66 = strComparableQueue61.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean69 = strComparableQueue61.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        java.lang.String str70 = strComparableQueue61.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        boolean boolean75 = strComparableQueue72.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue72.remove();
        boolean boolean77 = strComparableQueue61.contains((java.lang.Object) strComparableQueue72);
        boolean boolean78 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator79 = strComparableQueue72.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue81 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList83 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean84 = strComparableList83.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean85 = strComparableQueue81.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList83);
        strComparableQueue81.clear();
        java.lang.Comparable<java.lang.String> strComparable87 = strComparableQueue81.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream88 = strComparableQueue81.parallelStream();
        strComparableQueue81.clear();
        boolean boolean90 = strComparableQueue72.contains((java.lang.Object) strComparableQueue81);
        boolean boolean92 = strComparableQueue72.offer((java.lang.Comparable<java.lang.String>) "[[hi!]]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]" + "'", str63.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + strComparable76 + "' != '" + "" + "'", strComparable76.equals(""));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(strComparable87);
        org.junit.Assert.assertNotNull(strComparableStream88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        int int16 = strComparableQueue12.maxSize();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue12.peek();
        boolean boolean18 = strComparableQueue1.remove((java.lang.Object) strComparable17);
        try {
            java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue1.remove();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        boolean boolean2 = strComparableQueue1.isEmpty();
        java.lang.String str3 = strComparableQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator16 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue18.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream25 = strComparableQueue18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        boolean boolean32 = strComparableQueue30.isAtFullCapacity();
        boolean boolean33 = strComparableQueue27.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue30.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableQueue36.iterator();
        boolean boolean38 = strComparableQueue30.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue36);
        boolean boolean39 = strComparableQueue18.contains((java.lang.Object) boolean38);
        boolean boolean40 = strComparableQueue18.isAtFullCapacity();
        boolean boolean41 = strComparableQueue1.contains((java.lang.Object) boolean40);
        boolean boolean42 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue44.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue47 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableQueue47.poll();
        boolean boolean49 = strComparableQueue47.isAtFullCapacity();
        boolean boolean50 = strComparableQueue44.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue47);
        boolean boolean52 = strComparableQueue47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue47.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableQueue55.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue58 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList60 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean61 = strComparableList60.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean62 = strComparableQueue58.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList60);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream63 = strComparableList60.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream66 = strComparableQueue65.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream69 = strComparableQueue68.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList73 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean74 = strComparableList73.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean75 = strComparableQueue71.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList73);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream76 = strComparableList73.stream();
        java.util.stream.Stream[] streamArray78 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray79 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray78;
        strComparableStreamArray79[0] = strComparableStream63;
        strComparableStreamArray79[1] = strComparableStream66;
        strComparableStreamArray79[2] = strComparableStream69;
        strComparableStreamArray79[3] = strComparableStream76;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray88 = strComparableQueue55.toArray(strComparableStreamArray79);
        boolean boolean89 = strComparableQueue55.isEmpty();
        boolean boolean90 = strComparableQueue47.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        boolean boolean91 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue47);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNotNull(strComparableStream25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertNotNull(strComparableItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strComparable45);
        org.junit.Assert.assertNull(strComparable48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strComparable56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strComparableStream63);
        org.junit.Assert.assertNotNull(strComparableStream66);
        org.junit.Assert.assertNotNull(strComparableStream69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strComparableStream76);
        org.junit.Assert.assertNotNull(streamArray78);
        org.junit.Assert.assertNotNull(strComparableStreamArray79);
        org.junit.Assert.assertNotNull(strComparableStreamArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Class<?> wildcardClass4 = strComparableQueue1.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream7 = strComparableQueue6.stream();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue6.poll();
        java.lang.String str9 = strComparableQueue6.toString();
        boolean boolean10 = strComparableQueue6.isFull();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator11 = strComparableQueue6.spliterator();
        boolean boolean12 = strComparableQueue1.remove((java.lang.Object) strComparableQueue6);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strComparableStream7);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue7.stream();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue7.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue5.poll();
        boolean boolean13 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        try {
            java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue5.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue5.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        boolean boolean12 = strComparableQueue10.isAtFullCapacity();
        java.lang.Object[] objArray13 = strComparableQueue10.toArray();
        int int14 = strComparableQueue10.maxSize();
        boolean boolean15 = strComparableQueue5.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        boolean boolean16 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue5.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue19.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator25 = strComparableQueue23.spliterator();
        boolean boolean26 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        java.lang.String str30 = strComparableQueue28.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor31 = strComparableQueue28.iterator();
        boolean boolean32 = strComparableQueue28.isEmpty();
        java.lang.Object[] objArray33 = strComparableQueue28.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray36 = strComparableQueue35.toArray();
        int int37 = strComparableQueue35.size();
        boolean boolean38 = strComparableQueue28.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue35);
        boolean boolean39 = strComparableQueue19.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue28);
        boolean boolean41 = strComparableQueue28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue5.contains((java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNotNull(strComparableSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]" + "'", str30.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue0 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        java.lang.Comparable<java.lang.String> strComparable1 = strComparableQueue0.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator2 = strComparableQueue0.spliterator();
        boolean boolean3 = strComparableQueue0.isAtFullCapacity();
        boolean boolean4 = strComparableQueue0.isFull();
        org.junit.Assert.assertNull(strComparable1);
        org.junit.Assert.assertNotNull(strComparableSpliterator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        int int4 = strComparableQueue1.size();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 10);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        boolean boolean15 = strComparableQueue12.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue12.remove();
        boolean boolean17 = strComparableQueue1.contains((java.lang.Object) strComparableQueue12);
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue1.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + strComparable16 + "' != '" + "" + "'", strComparable16.equals(""));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable18);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        boolean boolean18 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass19 = strComparableQueue1.getClass();
        boolean boolean20 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray14 = strComparableQueue13.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList18 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableList18.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean20 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream21 = strComparableList18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableList31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream41 = strComparableList38.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList45 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean46 = strComparableList45.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean47 = strComparableQueue43.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList45);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream48 = strComparableList45.stream();
        java.util.AbstractCollection[] abstractCollectionArray50 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray51 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray50;
        strComparableCollectionArray51[0] = strComparableList18;
        strComparableCollectionArray51[1] = strComparableList25;
        strComparableCollectionArray51[2] = strComparableList31;
        strComparableCollectionArray51[3] = strComparableList38;
        strComparableCollectionArray51[4] = strComparableList45;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray62 = strComparableQueue13.toArray(strComparableCollectionArray51);
        strComparableQueue13.clear();
        boolean boolean64 = strComparableQueue8.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Class<?> wildcardClass65 = strComparableQueue13.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strComparableStream21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strComparableStream41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableStream48);
        org.junit.Assert.assertNotNull(abstractCollectionArray50);
        org.junit.Assert.assertNotNull(strComparableCollectionArray51);
        org.junit.Assert.assertNotNull(strComparableCollectionArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        boolean boolean41 = strComparableQueue39.isAtFullCapacity();
        boolean boolean42 = strComparableQueue36.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        boolean boolean44 = strComparableQueue39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean45 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList53 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean54 = strComparableList53.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean55 = strComparableQueue51.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList53);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream56 = strComparableList53.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue58 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream59 = strComparableQueue58.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream62 = strComparableQueue61.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList66 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean67 = strComparableList66.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean68 = strComparableQueue64.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList66);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream69 = strComparableList66.stream();
        java.util.stream.Stream[] streamArray71 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray72 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray71;
        strComparableStreamArray72[0] = strComparableStream56;
        strComparableStreamArray72[1] = strComparableStream59;
        strComparableStreamArray72[2] = strComparableStream62;
        strComparableStreamArray72[3] = strComparableStream69;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray81 = strComparableQueue48.toArray(strComparableStreamArray72);
        boolean boolean82 = strComparableQueue48.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue84 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList86 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean87 = strComparableList86.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean88 = strComparableQueue84.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream89 = strComparableList86.stream();
        boolean boolean90 = strComparableQueue48.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        boolean boolean91 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList86);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator92 = strComparableList86.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparableStream56);
        org.junit.Assert.assertNotNull(strComparableStream59);
        org.junit.Assert.assertNotNull(strComparableStream62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparableStream69);
        org.junit.Assert.assertNotNull(streamArray71);
        org.junit.Assert.assertNotNull(strComparableStreamArray72);
        org.junit.Assert.assertNotNull(strComparableStreamArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strComparableStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator92);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        boolean boolean5 = strComparableQueue1.isFull();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator6 = strComparableQueue1.spliterator();
        java.lang.Class<?> wildcardClass7 = strComparableQueue1.getClass();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        boolean boolean5 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        boolean boolean12 = strComparableQueue10.isAtFullCapacity();
        boolean boolean13 = strComparableQueue7.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        boolean boolean15 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Object> objQueue16 = new Tester.CircularFifoQueue<java.lang.Object>();
        boolean boolean17 = strComparableQueue10.remove((java.lang.Object) objQueue16);
        boolean boolean18 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue10.poll();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19.equals("hi!"));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableQueue18.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue18.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue18.isEmpty();
        boolean boolean23 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        java.lang.String str27 = strComparableQueue25.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor28 = strComparableQueue25.iterator();
        boolean boolean29 = strComparableQueue25.isEmpty();
        java.lang.Object[] objArray30 = strComparableQueue25.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean33 = strComparableQueue25.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        boolean boolean35 = strComparableQueue32.remove((java.lang.Object) 10L);
        boolean boolean36 = strComparableQueue14.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        int int37 = strComparableQueue32.maxSize();
        strComparableQueue32.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + strComparable20 + "' != '" + "" + "'", strComparable20.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[]" + "'", str27.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable72 = strComparableQueue71.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue74 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableQueue74.poll();
        boolean boolean76 = strComparableQueue74.isAtFullCapacity();
        boolean boolean77 = strComparableQueue71.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue74);
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableQueue74.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue80 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor81 = strComparableQueue80.iterator();
        boolean boolean82 = strComparableQueue74.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue80);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor83 = strComparableQueue74.iterator();
        boolean boolean84 = strComparableQueue53.remove((java.lang.Object) strComparableItor83);
        try {
            java.lang.Comparable<java.lang.String> strComparable85 = strComparableQueue53.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strComparable72);
        org.junit.Assert.assertNull(strComparable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(strComparable78);
        org.junit.Assert.assertNotNull(strComparableItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strComparableItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.lang.String str10 = strComparableQueue1.toString();
        boolean boolean11 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        boolean boolean21 = strComparableQueue15.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean22 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue18.parallelStream();
        int int24 = strComparableQueue18.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue59.stream();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableQueue59.poll();
        java.lang.Object[] objArray62 = strComparableQueue59.toArray();
        boolean boolean63 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue59);
        strComparableQueue59.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNull(strComparable61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue4.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue4.element();
        boolean boolean12 = strComparableQueue4.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + strComparable11 + "' != '" + "hi!" + "'", strComparable11.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue1.remove();
        boolean boolean36 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray39 = strComparableQueue38.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList43 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean44 = strComparableList43.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean45 = strComparableQueue41.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList43);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream46 = strComparableList43.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList50 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean51 = strComparableList50.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean52 = strComparableQueue48.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList50);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue54 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList56 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean57 = strComparableList56.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean58 = strComparableQueue54.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList56);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream59 = strComparableList56.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList63 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean64 = strComparableList63.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean65 = strComparableQueue61.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList63);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream66 = strComparableList63.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList70 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean71 = strComparableList70.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean72 = strComparableQueue68.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList70);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream73 = strComparableList70.stream();
        java.util.AbstractCollection[] abstractCollectionArray75 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray76 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray75;
        strComparableCollectionArray76[0] = strComparableList43;
        strComparableCollectionArray76[1] = strComparableList50;
        strComparableCollectionArray76[2] = strComparableList56;
        strComparableCollectionArray76[3] = strComparableList63;
        strComparableCollectionArray76[4] = strComparableList70;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray87 = strComparableQueue38.toArray(strComparableCollectionArray76);
        strComparableQueue38.clear();
        strComparableQueue38.clear();
        boolean boolean90 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + strComparable35 + "' != '" + "hi!" + "'", strComparable35.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strComparableStream46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strComparableStream59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strComparableStream66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strComparableStream73);
        org.junit.Assert.assertNotNull(abstractCollectionArray75);
        org.junit.Assert.assertNotNull(strComparableCollectionArray76);
        org.junit.Assert.assertNotNull(strComparableCollectionArray87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        Tester.CircularFifoQueue<java.lang.CharSequence[]> charSequenceArrayQueue1 = new Tester.CircularFifoQueue<java.lang.CharSequence[]>((int) (short) 100);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        boolean boolean52 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableQueue55.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator57 = strComparableQueue55.spliterator();
        int int58 = strComparableQueue55.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue60 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList62 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean63 = strComparableList62.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean64 = strComparableQueue60.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList62);
        strComparableQueue60.clear();
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue60.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable69 = strComparableQueue68.poll();
        java.lang.String str70 = strComparableQueue68.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor71 = strComparableQueue68.iterator();
        boolean boolean72 = strComparableQueue60.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        boolean boolean73 = strComparableQueue68.isAtFullCapacity();
        boolean boolean74 = strComparableQueue55.remove((java.lang.Object) boolean73);
        java.lang.Object[] objArray75 = strComparableQueue55.toArray();
        boolean boolean76 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue78 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableQueue78.poll();
        java.lang.String str80 = strComparableQueue78.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor81 = strComparableQueue78.iterator();
        boolean boolean82 = strComparableQueue78.isEmpty();
        java.lang.Object[] objArray83 = strComparableQueue78.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue85 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray86 = strComparableQueue85.toArray();
        int int87 = strComparableQueue85.size();
        boolean boolean88 = strComparableQueue78.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue85);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream89 = strComparableQueue85.parallelStream();
        java.lang.Class<?> wildcardClass90 = strComparableQueue85.getClass();
        boolean boolean91 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue85);
        strComparableQueue1.clear();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(strComparable53);
        org.junit.Assert.assertNull(strComparable56);
        org.junit.Assert.assertNotNull(strComparableSpliterator57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertNull(strComparable69);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(strComparable79);
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "[]" + "'", str80.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strComparableStream89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        int int5 = strComparableQueue1.maxSize();
        boolean boolean6 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue10.iterator();
        boolean boolean12 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        strComparableQueue10.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableItor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        Tester.CircularFifoQueue<java.lang.Iterable<java.lang.Comparable<java.lang.String>>> strComparableIterableQueue0 = new Tester.CircularFifoQueue<java.lang.Iterable<java.lang.Comparable<java.lang.String>>>();
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        int int6 = strComparableQueue1.size();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream7 = strComparableQueue1.parallelStream();
        boolean boolean8 = strComparableQueue1.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strComparableStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue0 = new Tester.CircularFifoQueue<java.lang.reflect.Type>();
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray26 = strComparableQueue25.toArray();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableQueue25.parallelStream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.poll();
        boolean boolean32 = strComparableQueue29.offer((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList38 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableList38.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean40 = strComparableQueue36.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList38);
        strComparableQueue36.clear();
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue36.poll();
        java.lang.String str43 = strComparableQueue36.toString();
        Tester.BoundedCollection[] boundedCollectionArray45 = new Tester.BoundedCollection[6];
        @SuppressWarnings("unchecked") Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray46 = (Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[]) boundedCollectionArray45;
        strComparableCollectionArray46[0] = strComparableQueue10;
        strComparableCollectionArray46[1] = strComparableQueue18;
        strComparableCollectionArray46[2] = strComparableQueue25;
        strComparableCollectionArray46[3] = strComparableQueue29;
        strComparableCollectionArray46[4] = strComparableQueue34;
        strComparableCollectionArray46[5] = strComparableQueue36;
        Tester.BoundedCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray59 = strComparableQueue4.toArray(strComparableCollectionArray46);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue64 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList66 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean67 = strComparableList66.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean68 = strComparableQueue64.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList66);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream69 = strComparableList66.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream72 = strComparableQueue71.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue74 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream75 = strComparableQueue74.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue77 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList79 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean80 = strComparableList79.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean81 = strComparableQueue77.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList79);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream82 = strComparableList79.stream();
        java.util.stream.Stream[] streamArray84 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray85 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray84;
        strComparableStreamArray85[0] = strComparableStream69;
        strComparableStreamArray85[1] = strComparableStream72;
        strComparableStreamArray85[2] = strComparableStream75;
        strComparableStreamArray85[3] = strComparableStream82;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray94 = strComparableQueue61.toArray(strComparableStreamArray85);
        boolean boolean96 = strComparableQueue61.offer((java.lang.Comparable<java.lang.String>) "[]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue97 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        boolean boolean98 = strComparableQueue61.isFull();
        boolean boolean99 = strComparableQueue4.remove((java.lang.Object) strComparableQueue61);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[]" + "'", str43.equals("[]"));
        org.junit.Assert.assertNotNull(boundedCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray46);
        org.junit.Assert.assertNotNull(strComparableCollectionArray59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strComparableStream69);
        org.junit.Assert.assertNotNull(strComparableStream72);
        org.junit.Assert.assertNotNull(strComparableStream75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strComparableStream82);
        org.junit.Assert.assertNotNull(streamArray84);
        org.junit.Assert.assertNotNull(strComparableStreamArray85);
        org.junit.Assert.assertNotNull(strComparableStreamArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        int int3 = strComparableQueue1.size();
        try {
            java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.String str2 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray5 = strComparableQueue4.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableList9.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList22 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean23 = strComparableList22.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean24 = strComparableQueue20.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList22);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream25 = strComparableList22.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList29 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean30 = strComparableList29.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean31 = strComparableQueue27.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList29);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream32 = strComparableList29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList36 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean37 = strComparableList36.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean38 = strComparableQueue34.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList36);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream39 = strComparableList36.stream();
        java.util.AbstractCollection[] abstractCollectionArray41 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray42 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray41;
        strComparableCollectionArray42[0] = strComparableList9;
        strComparableCollectionArray42[1] = strComparableList16;
        strComparableCollectionArray42[2] = strComparableList22;
        strComparableCollectionArray42[3] = strComparableList29;
        strComparableCollectionArray42[4] = strComparableList36;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray53 = strComparableQueue4.toArray(strComparableCollectionArray42);
        boolean boolean54 = strComparableQueue4.isFull();
        boolean boolean55 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor56 = strComparableQueue4.iterator();
        boolean boolean57 = strComparableQueue4.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]" + "'", str2.equals("[]"));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strComparableStream25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strComparableStream32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparableStream39);
        org.junit.Assert.assertNotNull(abstractCollectionArray41);
        org.junit.Assert.assertNotNull(strComparableCollectionArray42);
        org.junit.Assert.assertNotNull(strComparableCollectionArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strComparableItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator16 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        strComparableQueue18.clear();
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue18.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream25 = strComparableQueue18.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        boolean boolean32 = strComparableQueue30.isAtFullCapacity();
        boolean boolean33 = strComparableQueue27.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue30);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue30.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableQueue36.iterator();
        boolean boolean38 = strComparableQueue30.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue36);
        boolean boolean39 = strComparableQueue18.contains((java.lang.Object) boolean38);
        boolean boolean40 = strComparableQueue18.isAtFullCapacity();
        boolean boolean41 = strComparableQueue1.contains((java.lang.Object) boolean40);
        boolean boolean42 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableQueue46.stream();
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableQueue46.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor49 = strComparableQueue46.iterator();
        boolean boolean50 = strComparableQueue44.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableQueue44.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor52 = strComparableQueue44.iterator();
        boolean boolean53 = strComparableQueue1.contains((java.lang.Object) strComparableQueue44);
        int int54 = strComparableQueue44.maxSize();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator55 = strComparableQueue44.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNotNull(strComparableStream25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertNotNull(strComparableItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertNull(strComparable48);
        org.junit.Assert.assertNotNull(strComparableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strComparable51);
        org.junit.Assert.assertNotNull(strComparableItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(strComparableSpliterator55);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.Class<?> wildcardClass44 = strComparableQueue1.getClass();
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue1.peek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(strComparable45);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Class<?> wildcardClass22 = strComparableQueue19.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        boolean boolean37 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        boolean boolean38 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean39 = strComparableQueue31.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableQueue31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean45 = strComparableQueue19.contains((java.lang.Object) boolean44);
        boolean boolean47 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        java.lang.String str48 = strComparableQueue19.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue50 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList52 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean53 = strComparableList52.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean54 = strComparableQueue50.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList52);
        strComparableQueue50.clear();
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableQueue50.poll();
        java.lang.String str57 = strComparableQueue50.toString();
        boolean boolean59 = strComparableQueue50.remove((java.lang.Object) false);
        boolean boolean60 = strComparableQueue19.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue50);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[[hi!]]" + "'", str48.equals("[[hi!]]"));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(strComparable56);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[]" + "'", str57.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Object> objQueue10 = new Tester.CircularFifoQueue<java.lang.Object>();
        boolean boolean11 = strComparableQueue4.remove((java.lang.Object) objQueue10);
        boolean boolean12 = strComparableQueue4.isFull();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.poll();
        boolean boolean6 = strComparableQueue1.isFull();
        boolean boolean8 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[[hi!]]");
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.peek();
        boolean boolean3 = strComparableQueue1.isEmpty();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator26 = strComparableQueue14.spliterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue14.iterator();
        boolean boolean29 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator26);
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.lang.Object obj17 = null;
        boolean boolean18 = strComparableQueue14.remove(obj17);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor19 = strComparableQueue14.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strComparableItor19);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        boolean boolean14 = strComparableQueue9.isAtFullCapacity();
        int int15 = strComparableQueue9.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        boolean boolean16 = strComparableQueue1.contains((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        boolean boolean43 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.lang.Object[] objArray44 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray47 = strComparableQueue46.toArray();
        int int48 = strComparableQueue46.size();
        boolean boolean49 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue50 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertNotNull(objArray4);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        boolean boolean4 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean6 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        java.lang.String str10 = strComparableQueue8.toString();
        boolean boolean11 = strComparableQueue1.contains((java.lang.Object) strComparableQueue8);
        try {
            java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue8.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean27 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean28 = strComparableQueue14.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + strComparable30 + "' != '" + "" + "'", strComparable30.equals(""));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isFull();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableQueue8.stream();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue8.poll();
        java.lang.String str11 = strComparableQueue8.toString();
        boolean boolean12 = strComparableQueue8.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        strComparableQueue14.clear();
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue14.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        boolean boolean24 = strComparableQueue22.isAtFullCapacity();
        java.lang.Object[] objArray25 = strComparableQueue22.toArray();
        strComparableQueue22.clear();
        boolean boolean27 = strComparableQueue14.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.String str28 = strComparableQueue14.toString();
        java.lang.Class<?> wildcardClass29 = strComparableQueue14.getClass();
        boolean boolean31 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean32 = strComparableQueue8.contains((java.lang.Object) boolean31);
        boolean boolean33 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean34 = strComparableQueue1.isFull();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[]" + "'", str28.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean52 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.peek();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        boolean boolean12 = strComparableQueue10.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue14.poll();
        java.lang.String str16 = strComparableQueue14.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor17 = strComparableQueue14.iterator();
        boolean boolean18 = strComparableQueue14.isEmpty();
        boolean boolean20 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean21 = strComparableQueue10.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableQueue29.poll();
        boolean boolean31 = strComparableQueue29.isAtFullCapacity();
        java.lang.Object[] objArray32 = strComparableQueue29.toArray();
        boolean boolean33 = strComparableQueue23.contains((java.lang.Object) objArray32);
        boolean boolean34 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        boolean boolean36 = strComparableQueue23.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean37 = strComparableQueue23.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        boolean boolean39 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(strComparable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue5.stream();
        boolean boolean7 = strComparableQueue5.isEmpty();
        boolean boolean8 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray11 = strComparableQueue10.toArray();
        java.lang.String str12 = strComparableQueue10.toString();
        boolean boolean13 = strComparableQueue1.contains((java.lang.Object) strComparableQueue10);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertNotNull(strComparableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        boolean boolean21 = strComparableQueue15.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean22 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean24 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList28 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean29 = strComparableList28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean30 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList28);
        strComparableQueue26.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor34 = strComparableQueue33.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        java.lang.String str38 = strComparableQueue36.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor39 = strComparableQueue36.iterator();
        java.util.Iterator[] iteratorArray41 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray42 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray41;
        strComparableItorArray42[0] = strComparableItor34;
        strComparableItorArray42[1] = strComparableItor39;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray47 = strComparableQueue26.toArray(strComparableItorArray42);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableQueue49.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableQueue52.poll();
        boolean boolean54 = strComparableQueue52.isAtFullCapacity();
        boolean boolean55 = strComparableQueue49.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue52);
        java.lang.Class<?> wildcardClass56 = strComparableQueue52.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray57 = new java.lang.reflect.GenericDeclaration[] { wildcardClass56 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray58 = strComparableQueue26.toArray(genericDeclarationArray57);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor59 = strComparableQueue26.iterator();
        boolean boolean60 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue26);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strComparableItor34);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[]" + "'", str38.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor39);
        org.junit.Assert.assertNotNull(iteratorArray41);
        org.junit.Assert.assertNotNull(strComparableItorArray42);
        org.junit.Assert.assertNotNull(strComparableItorArray47);
        org.junit.Assert.assertNull(strComparable50);
        org.junit.Assert.assertNull(strComparable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(genericDeclarationArray57);
        org.junit.Assert.assertNotNull(genericDeclarationArray58);
        org.junit.Assert.assertNotNull(strComparableItor59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray9 = strComparableQueue8.toArray();
        int int10 = strComparableQueue8.size();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray20 = strComparableQueue19.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream54 = strComparableList51.stream();
        java.util.AbstractCollection[] abstractCollectionArray56 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray57 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray56;
        strComparableCollectionArray57[0] = strComparableList24;
        strComparableCollectionArray57[1] = strComparableList31;
        strComparableCollectionArray57[2] = strComparableList37;
        strComparableCollectionArray57[3] = strComparableList44;
        strComparableCollectionArray57[4] = strComparableList51;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray68 = strComparableQueue19.toArray(strComparableCollectionArray57);
        boolean boolean69 = strComparableQueue13.contains((java.lang.Object) strComparableCollectionArray68);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue71 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream72 = strComparableQueue71.stream();
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue71.poll();
        java.lang.Object[] objArray74 = strComparableQueue71.toArray();
        boolean boolean75 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        boolean boolean76 = strComparableQueue8.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue71);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream77 = strComparableQueue71.stream();
        java.lang.Object[] objArray78 = strComparableQueue71.toArray();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableStream54);
        org.junit.Assert.assertNotNull(abstractCollectionArray56);
        org.junit.Assert.assertNotNull(strComparableCollectionArray57);
        org.junit.Assert.assertNotNull(strComparableCollectionArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strComparableStream72);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strComparableStream77);
        org.junit.Assert.assertNotNull(objArray78);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.String str2 = strComparableQueue1.toString();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]" + "'", str2.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        boolean boolean14 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 100);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator2 = strComparableQueue1.spliterator();
        int int3 = strComparableQueue1.size();
        org.junit.Assert.assertNotNull(strComparableSpliterator2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        strComparableQueue22.clear();
        boolean boolean46 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        strComparableQueue22.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        java.lang.Class<?> wildcardClass22 = strComparableQueue19.getClass();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        boolean boolean37 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        boolean boolean38 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean39 = strComparableQueue31.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableQueue31.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue31.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue42);
        boolean boolean45 = strComparableQueue19.contains((java.lang.Object) boolean44);
        boolean boolean47 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList51 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean52 = strComparableList51.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean53 = strComparableQueue49.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList51);
        strComparableQueue49.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableQueue56.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableQueue59.poll();
        java.lang.String str61 = strComparableQueue59.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor62 = strComparableQueue59.iterator();
        java.util.Iterator[] iteratorArray64 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray65 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray64;
        strComparableItorArray65[0] = strComparableItor57;
        strComparableItorArray65[1] = strComparableItor62;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray70 = strComparableQueue49.toArray(strComparableItorArray65);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue75.poll();
        boolean boolean77 = strComparableQueue75.isAtFullCapacity();
        boolean boolean78 = strComparableQueue72.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        java.lang.Class<?> wildcardClass79 = strComparableQueue75.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray80 = new java.lang.reflect.GenericDeclaration[] { wildcardClass79 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray81 = strComparableQueue49.toArray(genericDeclarationArray80);
        java.lang.Class<?> wildcardClass82 = genericDeclarationArray81.getClass();
        boolean boolean83 = strComparableQueue19.contains((java.lang.Object) wildcardClass82);
        java.lang.Comparable<java.lang.String> strComparable84 = strComparableQueue19.remove();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertNull(strComparable60);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "[]" + "'", str61.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor62);
        org.junit.Assert.assertNotNull(iteratorArray64);
        org.junit.Assert.assertNotNull(strComparableItorArray65);
        org.junit.Assert.assertNotNull(strComparableItorArray70);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNull(strComparable76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(genericDeclarationArray80);
        org.junit.Assert.assertNotNull(genericDeclarationArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + strComparable84 + "' != '" + "[hi!]" + "'", strComparable84.equals("[hi!]"));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) 'a');
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNotNull(strComparableStream2);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.peek();
        strComparableQueue1.clear();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream9);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        java.lang.String str4 = strComparableQueue1.toString();
        try {
            java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        java.lang.String str63 = strComparableQueue61.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue61.iterator();
        boolean boolean65 = strComparableQueue61.isEmpty();
        java.lang.Object[] objArray66 = strComparableQueue61.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean69 = strComparableQueue61.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        java.lang.String str70 = strComparableQueue61.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        boolean boolean75 = strComparableQueue72.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue72.remove();
        boolean boolean77 = strComparableQueue61.contains((java.lang.Object) strComparableQueue72);
        boolean boolean78 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        boolean boolean80 = strComparableQueue72.remove((java.lang.Object) 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]" + "'", str63.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + strComparable76 + "' != '" + "" + "'", strComparable76.equals(""));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        boolean boolean5 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean6 = strComparableQueue1.isAtFullCapacity();
        int int7 = strComparableQueue1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator59 = strComparableQueue1.spliterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strComparableSpliterator59);
        org.junit.Assert.assertNotNull(strComparableStream60);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        int int4 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue6.poll();
        boolean boolean8 = strComparableQueue6.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean17 = strComparableQueue6.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList21 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean22 = strComparableList21.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean23 = strComparableQueue19.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList21);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        boolean boolean27 = strComparableQueue25.isAtFullCapacity();
        java.lang.Object[] objArray28 = strComparableQueue25.toArray();
        boolean boolean29 = strComparableQueue19.contains((java.lang.Object) objArray28);
        boolean boolean30 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean32 = strComparableQueue19.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean33 = strComparableQueue1.remove((java.lang.Object) strComparableQueue19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue35.poll();
        boolean boolean37 = strComparableQueue35.isAtFullCapacity();
        java.lang.Object[] objArray38 = strComparableQueue35.toArray();
        int int39 = strComparableQueue35.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue41 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue41.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList46 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean47 = strComparableList46.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean48 = strComparableQueue44.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList46);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream49 = strComparableList46.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue51 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream52 = strComparableQueue51.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue54 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream55 = strComparableQueue54.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue57 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList59 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean60 = strComparableList59.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean61 = strComparableQueue57.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList59);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream62 = strComparableList59.stream();
        java.util.stream.Stream[] streamArray64 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray65 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray64;
        strComparableStreamArray65[0] = strComparableStream49;
        strComparableStreamArray65[1] = strComparableStream52;
        strComparableStreamArray65[2] = strComparableStream55;
        strComparableStreamArray65[3] = strComparableStream62;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray74 = strComparableQueue41.toArray(strComparableStreamArray65);
        boolean boolean75 = strComparableQueue41.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue77 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList79 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean80 = strComparableList79.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean81 = strComparableQueue77.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList79);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream82 = strComparableList79.stream();
        boolean boolean83 = strComparableQueue41.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList79);
        boolean boolean84 = strComparableQueue35.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue41);
        boolean boolean85 = strComparableQueue19.contains((java.lang.Object) boolean84);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strComparableStream49);
        org.junit.Assert.assertNotNull(strComparableStream52);
        org.junit.Assert.assertNotNull(strComparableStream55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strComparableStream62);
        org.junit.Assert.assertNotNull(streamArray64);
        org.junit.Assert.assertNotNull(strComparableStreamArray65);
        org.junit.Assert.assertNotNull(strComparableStreamArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strComparableStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.lang.Class<?> wildcardClass13 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        try {
            Tester.CircularFifoQueue<java.lang.Cloneable> cloneableQueue1 = new Tester.CircularFifoQueue<java.lang.Cloneable>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator59 = strComparableQueue1.spliterator();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableQueue1.poll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strComparableSpliterator59);
        org.junit.Assert.assertTrue("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60.equals("hi!"));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue5.remove();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + strComparable13 + "' != '" + "" + "'", strComparable13.equals(""));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue36 = new Tester.CircularFifoQueue<java.lang.reflect.Type>((int) (short) 10);
        boolean boolean37 = strComparableQueue1.remove((java.lang.Object) typeQueue36);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream38 = strComparableQueue1.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableQueue40.poll();
        boolean boolean42 = strComparableQueue40.isAtFullCapacity();
        java.lang.Object[] objArray43 = strComparableQueue40.toArray();
        int int44 = strComparableQueue40.maxSize();
        boolean boolean45 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue40);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strComparableStream38);
        org.junit.Assert.assertNull(strComparable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.lang.Class<?> wildcardClass23 = strComparableQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Class<?> wildcardClass31 = strComparableQueue27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] { wildcardClass31 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = strComparableQueue1.toArray(genericDeclarationArray32);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue35.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue38.poll();
        boolean boolean40 = strComparableQueue38.isAtFullCapacity();
        boolean boolean41 = strComparableQueue35.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        java.lang.Comparable<java.lang.String> strComparable42 = strComparableQueue38.peek();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator43 = strComparableQueue38.spliterator();
        boolean boolean44 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        boolean boolean46 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertNull(strComparable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strComparable42);
        org.junit.Assert.assertNotNull(strComparableSpliterator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor44 = strComparableQueue1.iterator();
        boolean boolean45 = strComparableQueue1.isAtFullCapacity();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream46 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strComparableItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableStream46);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        java.lang.String str63 = strComparableQueue61.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue61.iterator();
        boolean boolean65 = strComparableQueue61.isEmpty();
        java.lang.Object[] objArray66 = strComparableQueue61.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean69 = strComparableQueue61.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        java.lang.String str70 = strComparableQueue61.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        boolean boolean75 = strComparableQueue72.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue72.remove();
        boolean boolean77 = strComparableQueue61.contains((java.lang.Object) strComparableQueue72);
        boolean boolean78 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue80 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable81 = strComparableQueue80.poll();
        boolean boolean82 = strComparableQueue72.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue80);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream83 = strComparableQueue72.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]" + "'", str63.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + strComparable76 + "' != '" + "" + "'", strComparable76.equals(""));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(strComparable81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strComparableStream83);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        strComparableQueue10.clear();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        java.lang.String str20 = strComparableQueue18.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue10.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean31 = strComparableQueue10.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean32 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        boolean boolean34 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Object[] objArray35 = strComparableQueue1.toArray();
        int int36 = strComparableQueue1.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[]" + "'", str20.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray16 = strComparableQueue15.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableList20.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableList40.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList47 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean48 = strComparableList47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean49 = strComparableQueue45.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList47);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableList47.stream();
        java.util.AbstractCollection[] abstractCollectionArray52 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray53 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray52;
        strComparableCollectionArray53[0] = strComparableList20;
        strComparableCollectionArray53[1] = strComparableList27;
        strComparableCollectionArray53[2] = strComparableList33;
        strComparableCollectionArray53[3] = strComparableList40;
        strComparableCollectionArray53[4] = strComparableList47;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray64 = strComparableQueue15.toArray(strComparableCollectionArray53);
        boolean boolean65 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean66 = strComparableQueue15.isEmpty();
        int int67 = strComparableQueue15.maxSize();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(abstractCollectionArray52);
        org.junit.Assert.assertNotNull(strComparableCollectionArray53);
        org.junit.Assert.assertNotNull(strComparableCollectionArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator9 = strComparableQueue4.spliterator();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue4.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableSpliterator9);
        org.junit.Assert.assertNull(strComparable10);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        boolean boolean21 = strComparableQueue15.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean22 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue18.parallelStream();
        java.lang.Class<?> wildcardClass24 = strComparableQueue18.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean11 = strComparableQueue8.remove((java.lang.Object) 10L);
        try {
            java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.peek();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        boolean boolean7 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        int int13 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        strComparableQueue15.clear();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.lang.String str25 = strComparableQueue23.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor26 = strComparableQueue23.iterator();
        boolean boolean27 = strComparableQueue15.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableQueue23.parallelStream();
        boolean boolean29 = strComparableQueue9.contains((java.lang.Object) strComparableStream28);
        boolean boolean31 = strComparableQueue9.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean32 = strComparableQueue1.remove((java.lang.Object) "");
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]" + "'", str25.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean17 = strComparableQueue15.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        int int26 = strComparableQueue5.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean35 = strComparableQueue1.isEmpty();
        try {
            Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        boolean boolean3 = strComparableQueue1.isEmpty();
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue1.peek();
        int int5 = strComparableQueue1.size();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream6 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strComparableStream6);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue0 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        java.lang.Comparable<java.lang.String> strComparable1 = strComparableQueue0.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator2 = strComparableQueue0.spliterator();
        boolean boolean3 = strComparableQueue0.isAtFullCapacity();
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableQueue0.poll();
        boolean boolean5 = strComparableQueue0.isFull();
        org.junit.Assert.assertNull(strComparable1);
        org.junit.Assert.assertNotNull(strComparableSpliterator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        java.lang.String str58 = strComparableQueue1.toString();
        int int59 = strComparableQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "[hi!]" + "'", str58.equals("[hi!]"));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        java.lang.String str12 = strComparableQueue10.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue10.iterator();
        boolean boolean14 = strComparableQueue10.isEmpty();
        boolean boolean16 = strComparableQueue10.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean44 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean45 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue47 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor48 = strComparableQueue47.iterator();
        boolean boolean49 = strComparableQueue1.contains((java.lang.Object) strComparableQueue47);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strComparableItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.peek();
        strComparableQueue1.clear();
        boolean boolean9 = strComparableQueue1.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue1.stream();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator11 = strComparableQueue1.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertNotNull(strComparableSpliterator11);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue4.isFull();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor11 = strComparableQueue4.iterator();
        strComparableQueue4.clear();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableItor11);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue7.stream();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue7.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue5.poll();
        boolean boolean13 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue5.peek();
        boolean boolean15 = strComparableQueue5.isEmpty();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.String str35 = strComparableQueue13.toString();
        int int36 = strComparableQueue13.size();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[hi!]" + "'", str35.equals("[hi!]"));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        boolean boolean9 = strComparableQueue7.isAtFullCapacity();
        boolean boolean10 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue7);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue7.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable11);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        Tester.CircularFifoQueue<java.util.RandomAccess[]> randomAccessArrayQueue0 = new Tester.CircularFifoQueue<java.util.RandomAccess[]>();
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.poll();
        boolean boolean6 = strComparableQueue1.isFull();
        strComparableQueue1.clear();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue1.stream();
        int int24 = strComparableQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue3.stream();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue3.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        int int13 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        strComparableQueue15.clear();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.lang.String str25 = strComparableQueue23.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor26 = strComparableQueue23.iterator();
        boolean boolean27 = strComparableQueue15.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableQueue23.parallelStream();
        boolean boolean29 = strComparableQueue9.contains((java.lang.Object) strComparableStream28);
        boolean boolean30 = strComparableQueue9.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableQueue32.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue35.poll();
        java.lang.String str37 = strComparableQueue35.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor38 = strComparableQueue35.iterator();
        boolean boolean39 = strComparableQueue35.isEmpty();
        boolean boolean41 = strComparableQueue35.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue45.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        boolean boolean50 = strComparableQueue48.isAtFullCapacity();
        boolean boolean51 = strComparableQueue45.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue48);
        Tester.CircularFifoQueue[] circularFifoQueueArray53 = new Tester.CircularFifoQueue[5];
        @SuppressWarnings("unchecked") Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[] strComparableQueueArray54 = (Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[]) circularFifoQueueArray53;
        strComparableQueueArray54[0] = strComparableQueue9;
        strComparableQueueArray54[1] = strComparableQueue32;
        strComparableQueueArray54[2] = strComparableQueue35;
        strComparableQueueArray54[3] = strComparableQueue43;
        strComparableQueueArray54[4] = strComparableQueue45;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[] strComparableQueueArray65 = strComparableQueue3.toArray(strComparableQueueArray54);
        boolean boolean67 = strComparableQueue3.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean69 = strComparableQueue3.add((java.lang.Comparable<java.lang.String>) "[]");
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]" + "'", str25.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strComparable33);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]" + "'", str37.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(circularFifoQueueArray53);
        org.junit.Assert.assertNotNull(strComparableQueueArray54);
        org.junit.Assert.assertNotNull(strComparableQueueArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        java.lang.String str52 = strComparableQueue1.toString();
        java.lang.String str53 = strComparableQueue1.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]" + "'", str52.equals("[]"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]" + "'", str53.equals("[]"));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray8 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList12 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean13 = strComparableList12.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean14 = strComparableQueue10.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList12);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableList12.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList25 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean26 = strComparableList25.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean27 = strComparableQueue23.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList25);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableList25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.AbstractCollection[] abstractCollectionArray44 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray45 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray44;
        strComparableCollectionArray45[0] = strComparableList12;
        strComparableCollectionArray45[1] = strComparableList19;
        strComparableCollectionArray45[2] = strComparableList25;
        strComparableCollectionArray45[3] = strComparableList32;
        strComparableCollectionArray45[4] = strComparableList39;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray56 = strComparableQueue7.toArray(strComparableCollectionArray45);
        boolean boolean57 = strComparableQueue1.contains((java.lang.Object) strComparableCollectionArray56);
        int int58 = strComparableQueue1.maxSize();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        java.lang.String str63 = strComparableQueue61.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor64 = strComparableQueue61.iterator();
        boolean boolean65 = strComparableQueue61.isEmpty();
        java.lang.Object[] objArray66 = strComparableQueue61.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean69 = strComparableQueue61.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        java.lang.String str70 = strComparableQueue61.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue72 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue72.poll();
        boolean boolean75 = strComparableQueue72.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue72.remove();
        boolean boolean77 = strComparableQueue61.contains((java.lang.Object) strComparableQueue72);
        boolean boolean78 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue72);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator79 = strComparableQueue72.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue81 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList83 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean84 = strComparableList83.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean85 = strComparableQueue81.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList83);
        strComparableQueue81.clear();
        java.lang.Comparable<java.lang.String> strComparable87 = strComparableQueue81.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream88 = strComparableQueue81.parallelStream();
        strComparableQueue81.clear();
        boolean boolean90 = strComparableQueue72.contains((java.lang.Object) strComparableQueue81);
        java.lang.Comparable<java.lang.String> strComparable91 = strComparableQueue72.peek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(abstractCollectionArray44);
        org.junit.Assert.assertNotNull(strComparableCollectionArray45);
        org.junit.Assert.assertNotNull(strComparableCollectionArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]" + "'", str63.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[]" + "'", str70.equals("[]"));
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + strComparable76 + "' != '" + "" + "'", strComparable76.equals(""));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(strComparable87);
        org.junit.Assert.assertNotNull(strComparableStream88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(strComparable91);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream7 = strComparableQueue6.stream();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue6.poll();
        java.lang.String str9 = strComparableQueue6.toString();
        boolean boolean10 = strComparableQueue6.isFull();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator11 = strComparableQueue6.spliterator();
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue6);
        strComparableQueue1.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNotNull(strComparableStream7);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        boolean boolean7 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        Tester.CircularFifoQueue<java.util.ArrayList<java.lang.Comparable<java.lang.String>>> strComparableListQueue1 = new Tester.CircularFifoQueue<java.util.ArrayList<java.lang.Comparable<java.lang.String>>>(2);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator3 = strComparableQueue1.spliterator();
        int int4 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList8 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean9 = strComparableList8.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue6.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList8);
        strComparableQueue6.clear();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue6.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableQueue14.poll();
        java.lang.String str16 = strComparableQueue14.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor17 = strComparableQueue14.iterator();
        boolean boolean18 = strComparableQueue6.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean19 = strComparableQueue14.isAtFullCapacity();
        boolean boolean20 = strComparableQueue1.remove((java.lang.Object) boolean19);
        java.lang.Object[] objArray21 = strComparableQueue1.toArray();
        boolean boolean23 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertNull(strComparable15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[]" + "'", str16.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>> strComparableStreamQueue22 = new Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>();
        boolean boolean23 = strComparableQueue19.contains((java.lang.Object) strComparableStreamQueue22);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream24 = strComparableQueue19.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strComparableStream24);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean27 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList31 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean32 = strComparableList31.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean33 = strComparableQueue29.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList31);
        strComparableQueue29.clear();
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue29.poll();
        boolean boolean36 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue29);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor37 = strComparableQueue29.iterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableItor37);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        try {
            Tester.CircularFifoQueue<java.lang.Class<?>> wildcardClassQueue1 = new Tester.CircularFifoQueue<java.lang.Class<?>>((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean16 = strComparableQueue8.isEmpty();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        boolean boolean21 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>> strComparableStreamQueue22 = new Tester.CircularFifoQueue<java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>();
        boolean boolean23 = strComparableQueue19.contains((java.lang.Object) strComparableStreamQueue22);
        boolean boolean25 = strComparableQueue19.offer((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        strComparableQueue1.clear();
        java.lang.String str52 = strComparableQueue1.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue54 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableQueue54.poll();
        java.lang.String str56 = strComparableQueue54.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor57 = strComparableQueue54.iterator();
        boolean boolean58 = strComparableQueue54.isEmpty();
        java.lang.Object[] objArray59 = strComparableQueue54.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean62 = strComparableQueue54.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str63 = strComparableQueue54.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue65 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableQueue65.poll();
        boolean boolean68 = strComparableQueue65.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable69 = strComparableQueue65.remove();
        boolean boolean70 = strComparableQueue54.contains((java.lang.Object) strComparableQueue65);
        java.lang.Class<?> wildcardClass71 = strComparableQueue65.getClass();
        boolean boolean72 = strComparableQueue1.remove((java.lang.Object) strComparableQueue65);
        int int73 = strComparableQueue65.size();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "[]" + "'", str52.equals("[]"));
        org.junit.Assert.assertNull(strComparable55);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[]" + "'", str56.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "[]" + "'", str63.equals("[]"));
        org.junit.Assert.assertNull(strComparable66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + strComparable69 + "' != '" + "" + "'", strComparable69.equals(""));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        boolean boolean3 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[[hi!]]");
        java.lang.String str4 = strComparableQueue1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[[[hi!]]]" + "'", str4.equals("[[[hi!]]]"));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        boolean boolean13 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        boolean boolean21 = strComparableQueue15.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        boolean boolean22 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "[]", "hi!", "[]", "" };
        java.lang.CharSequence[] charSequenceArray28 = strComparableQueue18.toArray(charSequenceArray27);
        boolean boolean30 = strComparableQueue18.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Object[] objArray31 = strComparableQueue18.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue1);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor38 = strComparableQueue37.iterator();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strComparableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        Tester.CircularFifoQueue<java.util.stream.BaseStream<java.lang.Comparable<java.lang.String>, java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>> strComparableBaseStreamQueue1 = new Tester.CircularFifoQueue<java.util.stream.BaseStream<java.lang.Comparable<java.lang.String>, java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>>(5);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean32 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue38.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator40 = strComparableQueue38.spliterator();
        boolean boolean41 = strComparableQueue34.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        boolean boolean42 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableQueue31.stream();
        int int44 = strComparableQueue31.maxSize();
        boolean boolean45 = strComparableQueue1.contains((java.lang.Object) int44);
        boolean boolean47 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableQueue1.poll();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strComparable39);
        org.junit.Assert.assertNotNull(strComparableSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + strComparable48 + "' != '" + "hi!" + "'", strComparable48.equals("hi!"));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        boolean boolean20 = strComparableQueue18.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue22.isEmpty();
        boolean boolean28 = strComparableQueue22.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean29 = strComparableQueue18.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableQueue37.poll();
        boolean boolean39 = strComparableQueue37.isAtFullCapacity();
        java.lang.Object[] objArray40 = strComparableQueue37.toArray();
        boolean boolean41 = strComparableQueue31.contains((java.lang.Object) objArray40);
        boolean boolean42 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean43 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.Class<?> wildcardClass44 = strComparableQueue1.getClass();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor45 = strComparableQueue1.iterator();
        strComparableQueue1.clear();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator47 = strComparableQueue1.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strComparable38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strComparableItor45);
        org.junit.Assert.assertNotNull(strComparableSpliterator47);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        int int3 = strComparableQueue1.maxSize();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue1.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor7 = strComparableQueue6.iterator();
        int int8 = strComparableQueue6.maxSize();
        boolean boolean9 = strComparableQueue1.remove((java.lang.Object) int8);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue1.stream();
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNotNull(strComparableItor7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strComparableStream10);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.poll();
        boolean boolean6 = strComparableQueue1.isFull();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor7 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator34 = strComparableQueue13.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue36.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator38 = strComparableQueue36.spliterator();
        java.lang.String str39 = strComparableQueue36.toString();
        strComparableQueue36.clear();
        boolean boolean41 = strComparableQueue13.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue36);
        boolean boolean42 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue36);
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strComparableItor7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strComparableSpliterator34);
        org.junit.Assert.assertNull(strComparable37);
        org.junit.Assert.assertNotNull(strComparableSpliterator38);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]" + "'", str39.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.String str35 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass36 = strComparableQueue1.getClass();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[hi!]" + "'", str35.equals("[hi!]"));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        java.lang.Object[] objArray4 = strComparableQueue1.toArray();
        strComparableQueue1.clear();
        int int6 = strComparableQueue1.size();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator7 = strComparableQueue1.spliterator();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strComparableSpliterator7);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        strComparableQueue4.clear();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue4.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.lang.String str14 = strComparableQueue12.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor15 = strComparableQueue12.iterator();
        boolean boolean16 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue18.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue21 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue21.poll();
        boolean boolean23 = strComparableQueue21.isAtFullCapacity();
        boolean boolean24 = strComparableQueue18.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue21);
        boolean boolean25 = strComparableQueue4.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue21);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream26 = strComparableQueue21.parallelStream();
        boolean boolean27 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue21);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertNull(strComparable22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strComparableStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue6.poll();
        boolean boolean8 = strComparableQueue6.isAtFullCapacity();
        java.lang.Object[] objArray9 = strComparableQueue6.toArray();
        int int10 = strComparableQueue6.maxSize();
        boolean boolean11 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue6);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList15 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean16 = strComparableList15.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean17 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList15);
        strComparableQueue13.clear();
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableQueue13.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue13.stream();
        int int21 = strComparableQueue13.maxSize();
        boolean boolean22 = strComparableQueue6.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.String str23 = strComparableQueue6.toString();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(strComparable19);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]" + "'", str23.equals("[]"));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor2 = strComparableQueue1.iterator();
        int int3 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList7 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean8 = strComparableList7.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean9 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList7);
        strComparableQueue5.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor13 = strComparableQueue12.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        java.util.Iterator[] iteratorArray20 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray21 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray20;
        strComparableItorArray21[0] = strComparableItor13;
        strComparableItorArray21[1] = strComparableItor18;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray26 = strComparableQueue5.toArray(strComparableItorArray21);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        boolean boolean33 = strComparableQueue31.isAtFullCapacity();
        boolean boolean34 = strComparableQueue28.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        java.lang.Class<?> wildcardClass35 = strComparableQueue31.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray36 = new java.lang.reflect.GenericDeclaration[] { wildcardClass35 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray37 = strComparableQueue5.toArray(genericDeclarationArray36);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray38 = strComparableQueue1.toArray(genericDeclarationArray36);
        org.junit.Assert.assertNotNull(strComparableItor2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strComparableItor13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertNotNull(iteratorArray20);
        org.junit.Assert.assertNotNull(strComparableItorArray21);
        org.junit.Assert.assertNotNull(strComparableItorArray26);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(genericDeclarationArray36);
        org.junit.Assert.assertNotNull(genericDeclarationArray37);
        org.junit.Assert.assertNotNull(genericDeclarationArray38);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.peek();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue1.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableItor8);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        boolean boolean14 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        boolean boolean15 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream16 = strComparableQueue1.stream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strComparableStream16);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        boolean boolean24 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "[]");
        int int25 = strComparableQueue1.size();
        boolean boolean27 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[[hi!]]");
        strComparableQueue1.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.lang.Class<?> wildcardClass16 = strComparableQueue1.getClass();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue1.peek();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue1.peek();
        try {
            java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue1.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertNull(strComparable18);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue1.remove();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue39.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList44 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean45 = strComparableList44.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean46 = strComparableQueue42.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList44);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream47 = strComparableList44.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue49 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableQueue49.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue52 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream53 = strComparableQueue52.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList57 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean58 = strComparableList57.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean59 = strComparableQueue55.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList57);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream60 = strComparableList57.stream();
        java.util.stream.Stream[] streamArray62 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray63 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray62;
        strComparableStreamArray63[0] = strComparableStream47;
        strComparableStreamArray63[1] = strComparableStream50;
        strComparableStreamArray63[2] = strComparableStream53;
        strComparableStreamArray63[3] = strComparableStream60;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray72 = strComparableQueue39.toArray(strComparableStreamArray63);
        Tester.CircularFifoQueue<java.lang.reflect.Type> typeQueue74 = new Tester.CircularFifoQueue<java.lang.reflect.Type>((int) (short) 10);
        boolean boolean75 = strComparableQueue39.remove((java.lang.Object) typeQueue74);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream76 = strComparableQueue39.stream();
        boolean boolean77 = strComparableQueue1.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream78 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + strComparable37 + "' != '" + "[]" + "'", strComparable37.equals("[]"));
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strComparableStream47);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(strComparableStream53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strComparableStream60);
        org.junit.Assert.assertNotNull(streamArray62);
        org.junit.Assert.assertNotNull(strComparableStreamArray63);
        org.junit.Assert.assertNotNull(strComparableStreamArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strComparableStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strComparableStream78);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        int int13 = strComparableQueue8.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray16 = strComparableQueue15.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList20 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean21 = strComparableList20.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean22 = strComparableQueue18.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList20);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableList20.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableList40.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList47 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean48 = strComparableList47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean49 = strComparableQueue45.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList47);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableList47.stream();
        java.util.AbstractCollection[] abstractCollectionArray52 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray53 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray52;
        strComparableCollectionArray53[0] = strComparableList20;
        strComparableCollectionArray53[1] = strComparableList27;
        strComparableCollectionArray53[2] = strComparableList33;
        strComparableCollectionArray53[3] = strComparableList40;
        strComparableCollectionArray53[4] = strComparableList47;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray64 = strComparableQueue15.toArray(strComparableCollectionArray53);
        boolean boolean65 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean67 = strComparableQueue8.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        java.lang.Object[] objArray68 = strComparableQueue8.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(abstractCollectionArray52);
        org.junit.Assert.assertNotNull(strComparableCollectionArray53);
        org.junit.Assert.assertNotNull(strComparableCollectionArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray68);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.lang.String str8 = strComparableQueue1.toString();
        boolean boolean10 = strComparableQueue1.remove((java.lang.Object) false);
        boolean boolean11 = strComparableQueue1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean22 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        java.lang.String str26 = strComparableQueue24.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor27 = strComparableQueue24.iterator();
        boolean boolean28 = strComparableQueue24.isEmpty();
        java.lang.Object[] objArray29 = strComparableQueue24.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean32 = strComparableQueue24.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue34 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue34.poll();
        boolean boolean36 = strComparableQueue34.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableQueue38.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator40 = strComparableQueue38.spliterator();
        boolean boolean41 = strComparableQueue34.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        boolean boolean42 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue34);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableQueue31.stream();
        int int44 = strComparableQueue31.maxSize();
        boolean boolean45 = strComparableQueue1.contains((java.lang.Object) int44);
        boolean boolean47 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "hi!");
        try {
            java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue1.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (35) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[]" + "'", str26.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strComparable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strComparable39);
        org.junit.Assert.assertNotNull(strComparableSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean27 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean28 = strComparableQueue14.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.lang.String str30 = strComparableQueue29.toString();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[]" + "'", str30.equals("[]"));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean9 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        boolean boolean13 = strComparableQueue11.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue15.spliterator();
        boolean boolean18 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        boolean boolean19 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue11);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue8.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        boolean boolean25 = strComparableQueue22.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean26 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableQueue22.poll();
        boolean boolean28 = strComparableQueue22.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue30.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        boolean boolean35 = strComparableQueue33.isAtFullCapacity();
        boolean boolean36 = strComparableQueue30.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        java.lang.Class<?> wildcardClass37 = strComparableQueue33.getClass();
        boolean boolean39 = strComparableQueue33.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean40 = strComparableQueue33.isEmpty();
        boolean boolean41 = strComparableQueue22.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + strComparable27 + "' != '" + "" + "'", strComparable27.equals(""));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray2 = strComparableQueue1.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList13 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean14 = strComparableList13.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean15 = strComparableQueue11.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList26 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean27 = strComparableList26.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean28 = strComparableQueue24.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList26);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream29 = strComparableList26.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList33 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean34 = strComparableList33.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean35 = strComparableQueue31.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList33);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream36 = strComparableList33.stream();
        java.util.AbstractCollection[] abstractCollectionArray38 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray39 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray38;
        strComparableCollectionArray39[0] = strComparableList6;
        strComparableCollectionArray39[1] = strComparableList13;
        strComparableCollectionArray39[2] = strComparableList19;
        strComparableCollectionArray39[3] = strComparableList26;
        strComparableCollectionArray39[4] = strComparableList33;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray50 = strComparableQueue1.toArray(strComparableCollectionArray39);
        boolean boolean51 = strComparableQueue1.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue53 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList55 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean56 = strComparableList55.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean57 = strComparableQueue53.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList55);
        strComparableQueue53.clear();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableQueue53.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        strComparableQueue61.clear();
        boolean boolean66 = strComparableQueue53.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue61);
        java.lang.String str67 = strComparableQueue53.toString();
        java.lang.Class<?> wildcardClass68 = strComparableQueue53.getClass();
        boolean boolean69 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue53);
        java.lang.Comparable<java.lang.String> strComparable70 = strComparableQueue1.peek();
        strComparableQueue1.clear();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream72 = strComparableQueue1.parallelStream();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strComparableStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strComparableStream36);
        org.junit.Assert.assertNotNull(abstractCollectionArray38);
        org.junit.Assert.assertNotNull(strComparableCollectionArray39);
        org.junit.Assert.assertNotNull(strComparableCollectionArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(strComparable59);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[]" + "'", str67.equals("[]"));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strComparable70);
        org.junit.Assert.assertNotNull(strComparableStream72);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue18 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean19 = strComparableQueue18.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue18.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor21 = strComparableQueue18.iterator();
        boolean boolean22 = strComparableQueue18.isEmpty();
        boolean boolean23 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue18);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable26 = strComparableQueue25.poll();
        boolean boolean27 = strComparableQueue25.isAtFullCapacity();
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue25.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue30 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList32 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean33 = strComparableList32.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean34 = strComparableQueue30.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList32);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream35 = strComparableList32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue37 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList39 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean40 = strComparableList39.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean41 = strComparableQueue37.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList39);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream42 = strComparableList39.stream();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator43 = strComparableList39.spliterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList47 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean48 = strComparableList47.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean49 = strComparableQueue45.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList47);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream50 = strComparableList47.stream();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator51 = strComparableList47.spliterator();
        java.util.RandomAccess[] randomAccessArray52 = new java.util.RandomAccess[] { strComparableList32, strComparableList39, strComparableList47 };
        java.util.RandomAccess[] randomAccessArray53 = strComparableQueue25.toArray(randomAccessArray52);
        java.util.RandomAccess[] randomAccessArray54 = strComparableQueue14.toArray(randomAccessArray53);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + strComparable20 + "' != '" + "" + "'", strComparable20.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strComparable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strComparableStream35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strComparableStream42);
        org.junit.Assert.assertNotNull(strComparableSpliterator43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strComparableStream50);
        org.junit.Assert.assertNotNull(strComparableSpliterator51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(randomAccessArray53);
        org.junit.Assert.assertNotNull(randomAccessArray54);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue1.toString();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream16 = strComparableQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableStream16);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList6 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean7 = strComparableList6.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean8 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList6);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream9 = strComparableList6.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream12 = strComparableQueue11.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream15 = strComparableQueue14.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream22 = strComparableList19.stream();
        java.util.stream.Stream[] streamArray24 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray25 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray24;
        strComparableStreamArray25[0] = strComparableStream9;
        strComparableStreamArray25[1] = strComparableStream12;
        strComparableStreamArray25[2] = strComparableStream15;
        strComparableStreamArray25[3] = strComparableStream22;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray34 = strComparableQueue1.toArray(strComparableStreamArray25);
        boolean boolean36 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[]");
        boolean boolean37 = strComparableQueue1.isEmpty();
        int int38 = strComparableQueue1.size();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray41 = strComparableQueue40.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList45 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean46 = strComparableList45.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean47 = strComparableQueue43.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList45);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream48 = strComparableList45.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue50 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList52 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean53 = strComparableList52.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean54 = strComparableQueue50.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList52);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue56 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList58 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean59 = strComparableList58.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean60 = strComparableQueue56.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList58);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream61 = strComparableList58.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue63 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList65 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean66 = strComparableList65.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean67 = strComparableQueue63.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList65);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream68 = strComparableList65.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue70 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList72 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean73 = strComparableList72.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean74 = strComparableQueue70.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList72);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream75 = strComparableList72.stream();
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[5];
        @SuppressWarnings("unchecked") java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray78 = (java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[]) abstractCollectionArray77;
        strComparableCollectionArray78[0] = strComparableList45;
        strComparableCollectionArray78[1] = strComparableList52;
        strComparableCollectionArray78[2] = strComparableList58;
        strComparableCollectionArray78[3] = strComparableList65;
        strComparableCollectionArray78[4] = strComparableList72;
        java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray89 = strComparableQueue40.toArray(strComparableCollectionArray78);
        try {
            java.util.AbstractCollection<java.lang.Comparable<java.lang.String>>[] strComparableCollectionArray90 = strComparableQueue1.toArray(strComparableCollectionArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strComparableStream9);
        org.junit.Assert.assertNotNull(strComparableStream12);
        org.junit.Assert.assertNotNull(strComparableStream15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableStream22);
        org.junit.Assert.assertNotNull(streamArray24);
        org.junit.Assert.assertNotNull(strComparableStreamArray25);
        org.junit.Assert.assertNotNull(strComparableStreamArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strComparableStream48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strComparableStream61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strComparableStream68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strComparableStream75);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strComparableCollectionArray78);
        org.junit.Assert.assertNotNull(strComparableCollectionArray89);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        strComparableQueue1.clear();
        java.lang.Object[] objArray3 = strComparableQueue1.toArray();
        boolean boolean4 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>(10);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.peek();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor3 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList7 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean8 = strComparableList7.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean9 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList7);
        strComparableQueue5.clear();
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue5.poll();
        java.lang.String str12 = strComparableQueue5.toString();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        strComparableQueue14.clear();
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue14.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableQueue22.poll();
        java.lang.String str24 = strComparableQueue22.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue22.iterator();
        boolean boolean26 = strComparableQueue14.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue31 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableQueue31.poll();
        boolean boolean33 = strComparableQueue31.isAtFullCapacity();
        boolean boolean34 = strComparableQueue28.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean35 = strComparableQueue14.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        boolean boolean36 = strComparableQueue5.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue31);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean39 = strComparableQueue38.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue38.remove();
        boolean boolean41 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        boolean boolean42 = strComparableQueue5.isAtFullCapacity();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream43 = strComparableQueue5.stream();
        boolean boolean44 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNotNull(strComparableItor3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]" + "'", str12.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertNull(strComparable23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]" + "'", str24.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertNull(strComparable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + strComparable40 + "' != '" + "" + "'", strComparable40.equals(""));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strComparableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.peek();
        java.lang.Object[] objArray6 = strComparableQueue1.toArray();
        boolean boolean7 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue13.isEmpty();
        boolean boolean36 = strComparableQueue13.offer((java.lang.Comparable<java.lang.String>) "[]");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableQueue13.remove();
        boolean boolean38 = strComparableQueue1.contains((java.lang.Object) strComparableQueue13);
        strComparableQueue1.clear();
        java.lang.Object[] objArray40 = strComparableQueue1.toArray();
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + strComparable37 + "' != '" + "[]" + "'", strComparable37.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray40);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream10 = strComparableQueue9.stream();
        boolean boolean11 = strComparableQueue4.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str14 = strComparableQueue13.toString();
        boolean boolean15 = strComparableQueue9.remove((java.lang.Object) str14);
        java.util.Collection<java.lang.Comparable<java.lang.String>> strComparableCollection16 = null;
        boolean boolean17 = strComparableQueue9.retainAll(strComparableCollection16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue19.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream27 = strComparableList24.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue29 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream30 = strComparableQueue29.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableQueue32.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList37 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean38 = strComparableList37.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean39 = strComparableQueue35.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList37);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream40 = strComparableList37.stream();
        java.util.stream.Stream[] streamArray42 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray43 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray42;
        strComparableStreamArray43[0] = strComparableStream27;
        strComparableStreamArray43[1] = strComparableStream30;
        strComparableStreamArray43[2] = strComparableStream33;
        strComparableStreamArray43[3] = strComparableStream40;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray52 = strComparableQueue19.toArray(strComparableStreamArray43);
        boolean boolean53 = strComparableQueue9.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        strComparableQueue19.clear();
        boolean boolean56 = strComparableQueue19.offer((java.lang.Comparable<java.lang.String>) "[]");
        int int57 = strComparableQueue19.maxSize();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strComparableStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]" + "'", str14.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strComparableStream27);
        org.junit.Assert.assertNotNull(strComparableStream30);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strComparableStream40);
        org.junit.Assert.assertNotNull(streamArray42);
        org.junit.Assert.assertNotNull(strComparableStreamArray43);
        org.junit.Assert.assertNotNull(strComparableStreamArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        boolean boolean9 = strComparableQueue4.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean10 = strComparableQueue4.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableList17.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream23 = strComparableQueue22.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream26 = strComparableQueue25.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList30 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean31 = strComparableList30.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean32 = strComparableQueue28.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList30);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream33 = strComparableList30.stream();
        java.util.stream.Stream[] streamArray35 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray36 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray35;
        strComparableStreamArray36[0] = strComparableStream20;
        strComparableStreamArray36[1] = strComparableStream23;
        strComparableStreamArray36[2] = strComparableStream26;
        strComparableStreamArray36[3] = strComparableStream33;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray45 = strComparableQueue12.toArray(strComparableStreamArray36);
        boolean boolean46 = strComparableQueue12.isEmpty();
        boolean boolean47 = strComparableQueue4.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        boolean boolean48 = strComparableQueue12.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertNotNull(strComparableStream23);
        org.junit.Assert.assertNotNull(strComparableStream26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strComparableStream33);
        org.junit.Assert.assertNotNull(streamArray35);
        org.junit.Assert.assertNotNull(strComparableStreamArray36);
        org.junit.Assert.assertNotNull(strComparableStreamArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream2 = strComparableQueue1.stream();
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.poll();
        java.lang.String str4 = strComparableQueue1.toString();
        boolean boolean5 = strComparableQueue1.isFull();
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean10 = strComparableQueue8.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue12.poll();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator14 = strComparableQueue12.spliterator();
        boolean boolean15 = strComparableQueue8.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue17 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList19 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean20 = strComparableList19.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean21 = strComparableQueue17.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList19);
        strComparableQueue17.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor25 = strComparableQueue24.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        java.lang.String str29 = strComparableQueue27.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor30 = strComparableQueue27.iterator();
        java.util.Iterator[] iteratorArray32 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray33 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray32;
        strComparableItorArray33[0] = strComparableItor25;
        strComparableItorArray33[1] = strComparableItor30;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray38 = strComparableQueue17.toArray(strComparableItorArray33);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue40 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableQueue40.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableQueue43.poll();
        boolean boolean45 = strComparableQueue43.isAtFullCapacity();
        boolean boolean46 = strComparableQueue40.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue43);
        java.lang.Class<?> wildcardClass47 = strComparableQueue43.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray48 = new java.lang.reflect.GenericDeclaration[] { wildcardClass47 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray49 = strComparableQueue17.toArray(genericDeclarationArray48);
        strComparableQueue17.clear();
        boolean boolean51 = strComparableQueue8.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue17);
        boolean boolean52 = strComparableQueue1.remove((java.lang.Object) strComparableQueue8);
        org.junit.Assert.assertNotNull(strComparableStream2);
        org.junit.Assert.assertNull(strComparable3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]" + "'", str4.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNotNull(strComparableSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strComparableItor25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]" + "'", str29.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor30);
        org.junit.Assert.assertNotNull(iteratorArray32);
        org.junit.Assert.assertNotNull(strComparableItorArray33);
        org.junit.Assert.assertNotNull(strComparableItorArray38);
        org.junit.Assert.assertNull(strComparable41);
        org.junit.Assert.assertNull(strComparable44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(genericDeclarationArray48);
        org.junit.Assert.assertNotNull(genericDeclarationArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue3 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream4 = strComparableQueue3.stream();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue3.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor6 = strComparableQueue3.iterator();
        boolean boolean7 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        java.lang.String str11 = strComparableQueue9.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue9.iterator();
        int int13 = strComparableQueue9.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList17 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean18 = strComparableList17.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean19 = strComparableQueue15.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList17);
        strComparableQueue15.clear();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue15.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        java.lang.String str25 = strComparableQueue23.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor26 = strComparableQueue23.iterator();
        boolean boolean27 = strComparableQueue15.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue23);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream28 = strComparableQueue23.parallelStream();
        boolean boolean29 = strComparableQueue9.contains((java.lang.Object) strComparableStream28);
        boolean boolean30 = strComparableQueue9.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableQueue32.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue35 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableQueue35.poll();
        java.lang.String str37 = strComparableQueue35.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor38 = strComparableQueue35.iterator();
        boolean boolean39 = strComparableQueue35.isEmpty();
        boolean boolean41 = strComparableQueue35.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue43 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue45 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue45.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue48 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableQueue48.poll();
        boolean boolean50 = strComparableQueue48.isAtFullCapacity();
        boolean boolean51 = strComparableQueue45.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue48);
        Tester.CircularFifoQueue[] circularFifoQueueArray53 = new Tester.CircularFifoQueue[5];
        @SuppressWarnings("unchecked") Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[] strComparableQueueArray54 = (Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[]) circularFifoQueueArray53;
        strComparableQueueArray54[0] = strComparableQueue9;
        strComparableQueueArray54[1] = strComparableQueue32;
        strComparableQueueArray54[2] = strComparableQueue35;
        strComparableQueueArray54[3] = strComparableQueue43;
        strComparableQueueArray54[4] = strComparableQueue45;
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>[] strComparableQueueArray65 = strComparableQueue3.toArray(strComparableQueueArray54);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue67 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList69 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean70 = strComparableList69.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean71 = strComparableQueue67.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList69);
        strComparableQueue67.clear();
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableQueue67.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue75 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable76 = strComparableQueue75.poll();
        boolean boolean77 = strComparableQueue75.isAtFullCapacity();
        java.lang.Object[] objArray78 = strComparableQueue75.toArray();
        strComparableQueue75.clear();
        boolean boolean80 = strComparableQueue67.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        java.lang.String str81 = strComparableQueue75.toString();
        boolean boolean82 = strComparableQueue3.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue75);
        org.junit.Assert.assertNotNull(strComparableStream4);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertNotNull(strComparableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]" + "'", str11.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]" + "'", str25.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strComparable33);
        org.junit.Assert.assertNull(strComparable36);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]" + "'", str37.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strComparable46);
        org.junit.Assert.assertNull(strComparable49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(circularFifoQueueArray53);
        org.junit.Assert.assertNotNull(strComparableQueueArray54);
        org.junit.Assert.assertNotNull(strComparableQueueArray65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(strComparable73);
        org.junit.Assert.assertNull(strComparable76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "[]" + "'", str81.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean27 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean28 = strComparableQueue14.isFull();
        java.lang.Class<?> wildcardClass29 = strComparableQueue14.getClass();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor30 = strComparableQueue14.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue32 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 100);
        java.lang.String str33 = strComparableQueue32.toString();
        boolean boolean34 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue32);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strComparableItor30);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[]" + "'", str33.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        Tester.CircularFifoQueue<java.util.stream.BaseStream<java.lang.Comparable<java.lang.String>, java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>> strComparableBaseStreamQueue0 = new Tester.CircularFifoQueue<java.util.stream.BaseStream<java.lang.Comparable<java.lang.String>, java.util.stream.Stream<java.lang.Comparable<java.lang.String>>>>();
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean14 = strComparableQueue8.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream17 = strComparableQueue16.stream();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue16.poll();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor19 = strComparableQueue16.iterator();
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableQueue16.peek();
        boolean boolean21 = strComparableQueue8.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue23 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue23.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue26 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList28 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean29 = strComparableList28.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean30 = strComparableQueue26.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList28);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream31 = strComparableList28.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream34 = strComparableQueue33.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue36 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream37 = strComparableQueue36.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue39 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList41 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean42 = strComparableList41.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean43 = strComparableQueue39.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList41);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream44 = strComparableList41.stream();
        java.util.stream.Stream[] streamArray46 = new java.util.stream.Stream[4];
        @SuppressWarnings("unchecked") java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray47 = (java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[]) streamArray46;
        strComparableStreamArray47[0] = strComparableStream31;
        strComparableStreamArray47[1] = strComparableStream34;
        strComparableStreamArray47[2] = strComparableStream37;
        strComparableStreamArray47[3] = strComparableStream44;
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>>[] strComparableStreamArray56 = strComparableQueue23.toArray(strComparableStreamArray47);
        boolean boolean57 = strComparableQueue23.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue59 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList61 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean62 = strComparableList61.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean63 = strComparableQueue59.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList61);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream64 = strComparableList61.stream();
        boolean boolean65 = strComparableQueue23.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList61);
        java.lang.Object[] objArray66 = strComparableQueue23.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue68 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.lang.Object[] objArray69 = strComparableQueue68.toArray();
        int int70 = strComparableQueue68.size();
        boolean boolean71 = strComparableQueue23.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        boolean boolean72 = strComparableQueue16.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue68);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strComparableStream17);
        org.junit.Assert.assertNull(strComparable18);
        org.junit.Assert.assertNotNull(strComparableItor19);
        org.junit.Assert.assertNull(strComparable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strComparableStream31);
        org.junit.Assert.assertNotNull(strComparableStream34);
        org.junit.Assert.assertNotNull(strComparableStream37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strComparableStream44);
        org.junit.Assert.assertNotNull(streamArray46);
        org.junit.Assert.assertNotNull(strComparableStreamArray47);
        org.junit.Assert.assertNotNull(strComparableStreamArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strComparableStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean4 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue1.remove();
        boolean boolean7 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "[hi!]");
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>();
        boolean boolean2 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable3 = strComparableQueue1.remove();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue6 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue6.poll();
        java.lang.String str8 = strComparableQueue6.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue6.iterator();
        int int10 = strComparableQueue6.maxSize();
        boolean boolean11 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue6);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor12 = strComparableQueue6.iterator();
        java.lang.String str13 = strComparableQueue6.toString();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator14 = strComparableQueue6.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + strComparable3 + "' != '" + "" + "'", strComparable3.equals(""));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]" + "'", str8.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strComparableItor12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableSpliterator14);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean26 = strComparableQueue14.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableQueue8.poll();
        boolean boolean11 = strComparableQueue8.offer((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue8);
        boolean boolean14 = strComparableQueue8.add((java.lang.Comparable<java.lang.String>) "[hi!]");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue16 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue16.poll();
        java.lang.String str18 = strComparableQueue16.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor19 = strComparableQueue16.iterator();
        boolean boolean20 = strComparableQueue8.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue16);
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableQueue8.get(0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]" + "'", str18.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + strComparable22 + "' != '" + "[hi!]" + "'", strComparable22.equals("[hi!]"));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        java.lang.Object[] objArray12 = strComparableQueue9.toArray();
        strComparableQueue9.clear();
        boolean boolean14 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue9);
        java.lang.String str15 = strComparableQueue9.toString();
        int int16 = strComparableQueue9.maxSize();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor17 = strComparableQueue9.iterator();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue9.iterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(strComparableItor17);
        org.junit.Assert.assertNotNull(strComparableItor18);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        boolean boolean3 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue5 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableQueue5.poll();
        java.lang.String str7 = strComparableQueue5.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor8 = strComparableQueue5.iterator();
        boolean boolean9 = strComparableQueue5.isEmpty();
        boolean boolean11 = strComparableQueue5.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean12 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue5);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList16 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean17 = strComparableList16.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean18 = strComparableQueue14.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList16);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue20 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableQueue20.poll();
        boolean boolean22 = strComparableQueue20.isAtFullCapacity();
        java.lang.Object[] objArray23 = strComparableQueue20.toArray();
        boolean boolean24 = strComparableQueue14.contains((java.lang.Object) objArray23);
        boolean boolean25 = strComparableQueue5.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean27 = strComparableQueue14.add((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue14.peek();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strComparable6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[]" + "'", str7.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + strComparable28 + "' != '" + "" + "'", strComparable28.equals(""));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableQueue1.remove();
        boolean boolean36 = strComparableQueue1.isEmpty();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList40 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean41 = strComparableList40.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean42 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList40);
        strComparableQueue38.clear();
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableQueue38.peek();
        boolean boolean45 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue38);
        try {
            java.lang.Comparable<java.lang.String> strComparable46 = strComparableQueue38.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + strComparable35 + "' != '" + "hi!" + "'", strComparable35.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strComparable44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.parallelStream();
        strComparableQueue1.clear();
        int int10 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue12 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList14 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean15 = strComparableList14.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean16 = strComparableQueue12.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList14);
        strComparableQueue12.clear();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableQueue12.poll();
        java.lang.String str19 = strComparableQueue12.toString();
        boolean boolean20 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable18);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]" + "'", str19.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue4 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableQueue4.poll();
        boolean boolean6 = strComparableQueue4.isAtFullCapacity();
        boolean boolean7 = strComparableQueue1.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue4);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue4.peek();
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator9 = strComparableQueue4.spliterator();
        boolean boolean10 = strComparableQueue4.isEmpty();
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertNull(strComparable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertNotNull(strComparableSpliterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue8 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor9 = strComparableQueue8.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue11 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableQueue11.poll();
        java.lang.String str13 = strComparableQueue11.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor14 = strComparableQueue11.iterator();
        java.util.Iterator[] iteratorArray16 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked") java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray17 = (java.util.Iterator<java.lang.Comparable<java.lang.String>>[]) iteratorArray16;
        strComparableItorArray17[0] = strComparableItor9;
        strComparableItorArray17[1] = strComparableItor14;
        java.util.Iterator<java.lang.Comparable<java.lang.String>>[] strComparableItorArray22 = strComparableQueue1.toArray(strComparableItorArray17);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue24 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue24.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue27 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableQueue27.poll();
        boolean boolean29 = strComparableQueue27.isAtFullCapacity();
        boolean boolean30 = strComparableQueue24.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue27);
        java.lang.Class<?> wildcardClass31 = strComparableQueue27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] { wildcardClass31 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = strComparableQueue1.toArray(genericDeclarationArray32);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue1.poll();
        boolean boolean35 = strComparableQueue1.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strComparableItor9);
        org.junit.Assert.assertNull(strComparable12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]" + "'", str13.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor14);
        org.junit.Assert.assertNotNull(iteratorArray16);
        org.junit.Assert.assertNotNull(strComparableItorArray17);
        org.junit.Assert.assertNotNull(strComparableItorArray22);
        org.junit.Assert.assertNull(strComparable25);
        org.junit.Assert.assertNull(strComparable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        boolean boolean5 = strComparableQueue1.isEmpty();
        boolean boolean7 = strComparableQueue1.add((java.lang.Comparable<java.lang.String>) "");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue9 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableQueue9.poll();
        boolean boolean11 = strComparableQueue9.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        java.lang.String str15 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor16 = strComparableQueue13.iterator();
        boolean boolean17 = strComparableQueue13.isEmpty();
        boolean boolean19 = strComparableQueue13.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean20 = strComparableQueue9.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue22 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList24 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean25 = strComparableList24.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean26 = strComparableQueue22.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList24);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue28 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableQueue28.poll();
        boolean boolean30 = strComparableQueue28.isAtFullCapacity();
        java.lang.Object[] objArray31 = strComparableQueue28.toArray();
        boolean boolean32 = strComparableQueue22.contains((java.lang.Object) objArray31);
        boolean boolean33 = strComparableQueue13.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue22);
        boolean boolean34 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.String str35 = strComparableQueue13.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor36 = strComparableQueue13.iterator();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue38 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream39 = strComparableQueue38.stream();
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue38.poll();
        java.lang.String str41 = strComparableQueue38.toString();
        boolean boolean42 = strComparableQueue38.isFull();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue44 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableQueue44.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue47 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableQueue47.poll();
        boolean boolean49 = strComparableQueue47.isAtFullCapacity();
        boolean boolean50 = strComparableQueue44.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue47);
        boolean boolean52 = strComparableQueue47.add((java.lang.Comparable<java.lang.String>) "hi!");
        Tester.CircularFifoQueue<java.lang.Object> objQueue53 = new Tester.CircularFifoQueue<java.lang.Object>();
        boolean boolean54 = strComparableQueue47.remove((java.lang.Object) objQueue53);
        boolean boolean55 = strComparableQueue38.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue47);
        boolean boolean56 = strComparableQueue13.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue47);
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[]" + "'", str15.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strComparable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[hi!]" + "'", str35.equals("[hi!]"));
        org.junit.Assert.assertNotNull(strComparableItor36);
        org.junit.Assert.assertNotNull(strComparableStream39);
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[]" + "'", str41.equals("[]"));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strComparable45);
        org.junit.Assert.assertNull(strComparable48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        strComparableQueue1.clear();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableQueue1.poll();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream8 = strComparableQueue1.stream();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue10 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableQueue10.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue13 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableQueue13.poll();
        boolean boolean15 = strComparableQueue13.isAtFullCapacity();
        boolean boolean16 = strComparableQueue10.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue13);
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableQueue13.peek();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue19 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor20 = strComparableQueue19.iterator();
        boolean boolean21 = strComparableQueue13.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue19);
        boolean boolean22 = strComparableQueue1.contains((java.lang.Object) boolean21);
        boolean boolean23 = strComparableQueue1.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue25 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList27 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean28 = strComparableList27.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean29 = strComparableQueue25.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList27);
        strComparableQueue25.clear();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableQueue25.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue33 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableQueue33.poll();
        boolean boolean35 = strComparableQueue33.isAtFullCapacity();
        java.lang.Object[] objArray36 = strComparableQueue33.toArray();
        strComparableQueue33.clear();
        boolean boolean38 = strComparableQueue25.containsAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue33);
        java.lang.String str39 = strComparableQueue25.toString();
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableQueue25.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue42 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableQueue42.poll();
        boolean boolean44 = strComparableQueue42.isAtFullCapacity();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue46 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableQueue46.poll();
        java.lang.String str48 = strComparableQueue46.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor49 = strComparableQueue46.iterator();
        boolean boolean50 = strComparableQueue46.isEmpty();
        boolean boolean52 = strComparableQueue46.add((java.lang.Comparable<java.lang.String>) "");
        boolean boolean53 = strComparableQueue42.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue55 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList57 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean58 = strComparableList57.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean59 = strComparableQueue55.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList57);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue61 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableQueue61.poll();
        boolean boolean63 = strComparableQueue61.isAtFullCapacity();
        java.lang.Object[] objArray64 = strComparableQueue61.toArray();
        boolean boolean65 = strComparableQueue55.contains((java.lang.Object) objArray64);
        boolean boolean66 = strComparableQueue46.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue55);
        boolean boolean67 = strComparableQueue25.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue46);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue69 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable70 = strComparableQueue69.poll();
        boolean boolean71 = strComparableQueue69.isAtFullCapacity();
        java.lang.Object[] objArray72 = strComparableQueue69.toArray();
        strComparableQueue69.clear();
        boolean boolean74 = strComparableQueue25.remove((java.lang.Object) strComparableQueue69);
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableQueue25.peek();
        boolean boolean76 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue25);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable7);
        org.junit.Assert.assertNotNull(strComparableStream8);
        org.junit.Assert.assertNull(strComparable11);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strComparable17);
        org.junit.Assert.assertNotNull(strComparableItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(strComparable31);
        org.junit.Assert.assertNull(strComparable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]" + "'", str39.equals("[]"));
        org.junit.Assert.assertNull(strComparable40);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strComparable47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "[]" + "'", str48.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(strComparable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(strComparable70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(strComparable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList3 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean4 = strComparableList3.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean5 = strComparableQueue1.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList3);
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableQueue7.poll();
        java.lang.String str9 = strComparableQueue7.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor10 = strComparableQueue7.iterator();
        boolean boolean11 = strComparableQueue7.isEmpty();
        java.lang.Object[] objArray12 = strComparableQueue7.toArray();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue14 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        boolean boolean15 = strComparableQueue7.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        boolean boolean16 = strComparableQueue1.removeAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue14);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator17 = strComparableQueue14.spliterator();
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream18 = strComparableQueue14.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strComparable8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[]" + "'", str9.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strComparableSpliterator17);
        org.junit.Assert.assertNotNull(strComparableStream18);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable2 = strComparableQueue1.poll();
        java.lang.String str3 = strComparableQueue1.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor4 = strComparableQueue1.iterator();
        int int5 = strComparableQueue1.maxSize();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue7 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.util.ArrayList<java.lang.Comparable<java.lang.String>> strComparableList9 = new java.util.ArrayList<java.lang.Comparable<java.lang.String>>();
        boolean boolean10 = strComparableList9.add((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean11 = strComparableQueue7.addAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableList9);
        strComparableQueue7.clear();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableQueue7.poll();
        Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue15 = new Tester.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (byte) 1);
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableQueue15.poll();
        java.lang.String str17 = strComparableQueue15.toString();
        java.util.Iterator<java.lang.Comparable<java.lang.String>> strComparableItor18 = strComparableQueue15.iterator();
        boolean boolean19 = strComparableQueue7.retainAll((java.util.Collection<java.lang.Comparable<java.lang.String>>) strComparableQueue15);
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream20 = strComparableQueue15.parallelStream();
        boolean boolean21 = strComparableQueue1.contains((java.lang.Object) strComparableStream20);
        boolean boolean23 = strComparableQueue1.offer((java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableQueue1.poll();
        try {
            java.lang.Comparable<java.lang.String> strComparable25 = strComparableQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNull(strComparable2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[]" + "'", str3.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strComparable13);
        org.junit.Assert.assertNull(strComparable16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[]" + "'", str17.equals("[]"));
        org.junit.Assert.assertNotNull(strComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strComparableStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + strComparable24 + "' != '" + "" + "'", strComparable24.equals(""));
    }
}
